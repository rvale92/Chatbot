{"ast":null,"code":"import _defineProperty from \"/Users/reimundovalentin/Downloads/ai-tutor-project/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/Users/reimundovalentin/Downloads/ai-tutor-project/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _Class3;\n/**\n * marked v15.0.12 - a markdown parser\n * Copyright (c) 2011-2025, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n// src/defaults.ts\nfunction _getDefaults() {\n  return {\n    async: false,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    hooks: null,\n    pedantic: false,\n    renderer: null,\n    silent: false,\n    tokenizer: null,\n    walkTokens: null\n  };\n}\nvar _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n  _defaults = newDefaults;\n}\n\n// src/rules.ts\nvar noopTest = {\n  exec: () => null\n};\nfunction edit(regex) {\n  let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  let source = typeof regex === \"string\" ? regex : regex.source;\n  const obj = {\n    replace: (name, val) => {\n      let valSource = typeof val === \"string\" ? val : val.source;\n      valSource = valSource.replace(other.caret, \"$1\");\n      source = source.replace(name, valSource);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(source, opt);\n    }\n  };\n  return obj;\n}\nvar other = {\n  codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n  outputLinkReplace: /\\\\([\\[\\]])/g,\n  indentCodeCompensation: /^(\\s+)(?:```)/,\n  beginningSpace: /^\\s+/,\n  endingHash: /#$/,\n  startingSpaceChar: /^ /,\n  endingSpaceChar: / $/,\n  nonSpaceChar: /[^ ]/,\n  newLineCharGlobal: /\\n/g,\n  tabCharGlobal: /\\t/g,\n  multipleSpaceGlobal: /\\s+/g,\n  blankLine: /^[ \\t]*$/,\n  doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n  blockquoteStart: /^ {0,3}>/,\n  blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n  blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n  listReplaceTabs: /^\\t+/,\n  listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n  listIsTask: /^\\[[ xX]\\] /,\n  listReplaceTask: /^\\[[ xX]\\] +/,\n  anyLine: /\\n.*\\n/,\n  hrefBrackets: /^<(.*)>$/,\n  tableDelimiter: /[:|]/,\n  tableAlignChars: /^\\||\\| *$/g,\n  tableRowBlankLine: /\\n[ \\t]*$/,\n  tableAlignRight: /^ *-+: *$/,\n  tableAlignCenter: /^ *:-+: *$/,\n  tableAlignLeft: /^ *:-+ *$/,\n  startATag: /^<a /i,\n  endATag: /^<\\/a>/i,\n  startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n  endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n  startAngleBracket: /^</,\n  endAngleBracket: />$/,\n  pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n  unicodeAlphaNumeric: /(?:[0-9A-Za-z\\xAA\\xB2\\xB3\\xB5\\xB9\\xBA\\xBC-\\xBE\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u0660-\\u0669\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07C0-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0966-\\u096F\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09E6-\\u09F1\\u09F4-\\u09F9\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A6F\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AE6-\\u0AEF\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B66-\\u0B6F\\u0B71-\\u0B77\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0BE6-\\u0BF2\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D58-\\u0D61\\u0D66-\\u0D78\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DE6-\\u0DEF\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F20-\\u0F33\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F-\\u1049\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u1090-\\u1099\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1369-\\u137C\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B50-\\u1B59\\u1B83-\\u1BA0\\u1BAE-\\u1BE5\\u1C00-\\u1C23\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C8A\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2070\\u2071\\u2074-\\u2079\\u207F-\\u2089\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2CFD\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u3192-\\u3195\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CD\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7DC\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA830-\\uA835\\uA840-\\uA873\\uA882-\\uA8B3\\uA8D0-\\uA8D9\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA900-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF-\\uA9D9\\uA9E0-\\uA9E4\\uA9E6-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE1-\\uDEFB\\uDF00-\\uDF23\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDD70-\\uDD7A\\uDD7C-\\uDD8A\\uDD8C-\\uDD92\\uDD94\\uDD95\\uDD97-\\uDDA1\\uDDA3-\\uDDB1\\uDDB3-\\uDDB9\\uDDBB\\uDDBC\\uDDC0-\\uDDF3\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67\\uDF80-\\uDF85\\uDF87-\\uDFB0\\uDFB2-\\uDFBA]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC58-\\uDC76\\uDC79-\\uDC9E\\uDCA7-\\uDCAF\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDCFB-\\uDD1B\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBC-\\uDDCF\\uDDD2-\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE40-\\uDE48\\uDE60-\\uDE7E\\uDE80-\\uDE9F\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDEEB-\\uDEEF\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF58-\\uDF72\\uDF78-\\uDF91\\uDFA9-\\uDFAF]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDCFA-\\uDD23\\uDD30-\\uDD39\\uDD40-\\uDD65\\uDD6F-\\uDD85\\uDE60-\\uDE7E\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDEC2-\\uDEC4\\uDF00-\\uDF27\\uDF30-\\uDF45\\uDF51-\\uDF54\\uDF70-\\uDF81\\uDFB0-\\uDFCB\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC52-\\uDC6F\\uDC71\\uDC72\\uDC75\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD03-\\uDD26\\uDD36-\\uDD3F\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDD0-\\uDDDA\\uDDDC\\uDDE1-\\uDDF4\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE3F\\uDE40\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDEF0-\\uDEF9\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61\\uDF80-\\uDF89\\uDF8B\\uDF8E\\uDF90-\\uDFB5\\uDFB7\\uDFD1\\uDFD3]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC50-\\uDC59\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEAA\\uDEB8\\uDEC0-\\uDEC9\\uDED0-\\uDEE3\\uDF00-\\uDF1A\\uDF30-\\uDF3B\\uDF40-\\uDF46]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCF2\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDD50-\\uDD59\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEB0-\\uDEF8\\uDFC0-\\uDFE0\\uDFF0-\\uDFF9]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC50-\\uDC6C\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD50-\\uDD59\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDDA0-\\uDDA9\\uDEE0-\\uDEF2\\uDF02\\uDF04-\\uDF10\\uDF12-\\uDF33\\uDF50-\\uDF59\\uDFB0\\uDFC0-\\uDFD4]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|\\uD80B[\\uDF90-\\uDFF0]|[\\uD80C\\uD80E\\uD80F\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883\\uD885-\\uD887][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2F\\uDC41-\\uDC46\\uDC60-\\uDFFF]|\\uD810[\\uDC00-\\uDFFA]|\\uD811[\\uDC00-\\uDE46]|\\uD818[\\uDD00-\\uDD1D\\uDD30-\\uDD39]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDE70-\\uDEBE\\uDEC0-\\uDEC9\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF5B-\\uDF61\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDD40-\\uDD6C\\uDD70-\\uDD79\\uDE40-\\uDE96\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDCFF-\\uDD08]|\\uD82B[\\uDFF0-\\uDFF3\\uDFF5-\\uDFFB\\uDFFD\\uDFFE]|\\uD82C[\\uDC00-\\uDD22\\uDD32\\uDD50-\\uDD52\\uDD55\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD833[\\uDCF0-\\uDCF9]|\\uD834[\\uDEC0-\\uDED3\\uDEE0-\\uDEF3\\uDF60-\\uDF78]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD837[\\uDF00-\\uDF1E\\uDF25-\\uDF2A]|\\uD838[\\uDC30-\\uDC6D\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD40-\\uDD49\\uDD4E\\uDE90-\\uDEAD\\uDEC0-\\uDEEB\\uDEF0-\\uDEF9]|\\uD839[\\uDCD0-\\uDCEB\\uDCF0-\\uDCF9\\uDDD0-\\uDDED\\uDDF0-\\uDDFA\\uDFE0-\\uDFE6\\uDFE8-\\uDFEB\\uDFED\\uDFEE\\uDFF0-\\uDFFE]|\\uD83A[\\uDC00-\\uDCC4\\uDCC7-\\uDCCF\\uDD00-\\uDD43\\uDD4B\\uDD50-\\uDD59]|\\uD83B[\\uDC71-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDCB4\\uDD01-\\uDD2D\\uDD2F-\\uDD3D\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD83C[\\uDD00-\\uDD0C]|\\uD83E[\\uDFF0-\\uDFF9]|\\uD869[\\uDC00-\\uDEDF\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF39\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0\\uDFF0-\\uDFFF]|\\uD87B[\\uDC00-\\uDE5D]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A\\uDF50-\\uDFFF]|\\uD888[\\uDC00-\\uDFAF])/,\n  escapeTest: /[&<>\"']/,\n  escapeReplace: /[&<>\"']/g,\n  escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n  escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n  unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n  caret: /(^|[^\\[])\\^/g,\n  percentDecode: /%25/g,\n  findPipe: /\\|/g,\n  splitPipe: / \\|/,\n  slashPipe: /\\\\\\|/g,\n  carriageReturn: /\\r\\n|\\r/g,\n  spaceLine: /^ +$/gm,\n  notSpaceStart: /^\\S*/,\n  endingNewline: /\\n$/,\n  listItemRegex: bull => new RegExp(\"^( {0,3}\".concat(bull, \")((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))\")),\n  nextBulletRegex: indent => new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))\")),\n  hrRegex: indent => new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)\")),\n  fencesBeginRegex: indent => new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}(?:```|~~~)\")),\n  headingBeginRegex: indent => new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}#\")),\n  htmlBeginRegex: indent => new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}<(?:[a-z].*>|!--)\"), \"i\")\n};\nvar newline = /^(?:[ \\t]*(?:\\n|$))+/;\nvar blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nvar fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nvar hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nvar heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nvar bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nvar lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\nvar lheading = edit(lheadingCore).replace(/bull/g, bullet).replace(/blockCode/g, /(?: {4}| {0,3}\\t)/).replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g, / {0,3}>/).replace(/heading/g, / {0,3}#{1,6}/).replace(/html/g, / {0,3}<[^\\n>]+>\\n/).replace(/\\|table/g, \"\").getRegex();\nvar lheadingGfm = edit(lheadingCore).replace(/bull/g, bullet).replace(/blockCode/g, /(?: {4}| {0,3}\\t)/).replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g, / {0,3}>/).replace(/heading/g, / {0,3}#{1,6}/).replace(/html/g, / {0,3}<[^\\n>]+>\\n/).replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/).getRegex();\nvar _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nvar blockText = /^[^\\n]+/;\nvar _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nvar def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/).replace(\"label\", _blockLabel).replace(\"title\", /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/).getRegex();\nvar list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/).replace(/bull/g, bullet).getRegex();\nvar _tag = \"address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul\";\nvar _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nvar html = edit(\"^ {0,3}(?:<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)|comment[^\\\\n]*(\\\\n+|$)|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \t]*)+\\\\n|$)|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \t]*)+\\\\n|$)|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \t]*)+\\\\n|$))\", \"i\").replace(\"comment\", _comment).replace(\"tag\", _tag).replace(\"attribute\", / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\nvar paragraph = edit(_paragraph).replace(\"hr\", hr).replace(\"heading\", \" {0,3}#{1,6}(?:\\\\s|$)\").replace(\"|lheading\", \"\").replace(\"|table\", \"\").replace(\"blockquote\", \" {0,3}>\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", _tag).getRegex();\nvar blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/).replace(\"paragraph\", paragraph).getRegex();\nvar blockNormal = {\n  blockquote,\n  code: blockCode,\n  def,\n  fences,\n  heading,\n  hr,\n  html,\n  lheading,\n  list,\n  newline,\n  paragraph,\n  table: noopTest,\n  text: blockText\n};\nvar gfmTable = edit(\"^ *([^\\\\n ].*)\\\\n {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)\").replace(\"hr\", hr).replace(\"heading\", \" {0,3}#{1,6}(?:\\\\s|$)\").replace(\"blockquote\", \" {0,3}>\").replace(\"code\", \"(?: {4}| {0,3}\t)[^\\\\n]\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", _tag).getRegex();\nvar blockGfm = _objectSpread(_objectSpread({}, blockNormal), {}, {\n  lheading: lheadingGfm,\n  table: gfmTable,\n  paragraph: edit(_paragraph).replace(\"hr\", hr).replace(\"heading\", \" {0,3}#{1,6}(?:\\\\s|$)\").replace(\"|lheading\", \"\").replace(\"table\", gfmTable).replace(\"blockquote\", \" {0,3}>\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", _tag).getRegex()\n});\nvar blockPedantic = _objectSpread(_objectSpread({}, blockNormal), {}, {\n  html: edit(\"^ *(?:comment *(?:\\\\n|\\\\s*$)|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)|<tag(?:\\\"[^\\\"]*\\\"|'[^']*'|\\\\s[^'\\\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))\").replace(\"comment\", _comment).replace(/tag/g, \"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b\").getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest,\n  // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(_paragraph).replace(\"hr\", hr).replace(\"heading\", \" *#{1,6} *[^\\n]\").replace(\"lheading\", lheading).replace(\"|table\", \"\").replace(\"blockquote\", \" {0,3}>\").replace(\"|fences\", \"\").replace(\"|list\", \"\").replace(\"|html\", \"\").replace(\"|tag\", \"\").getRegex()\n});\nvar escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nvar inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nvar br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nvar inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\nvar _punctuation = /(?:[!-\\/:-@\\[-`\\{-~\\xA1-\\xA9\\xAB\\xAC\\xAE-\\xB1\\xB4\\xB6-\\xB8\\xBB\\xBF\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u037E\\u0384\\u0385\\u0387\\u03F6\\u0482\\u055A-\\u055F\\u0589\\u058A\\u058D-\\u058F\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0606-\\u060F\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u06DE\\u06E9\\u06FD\\u06FE\\u0700-\\u070D\\u07F6-\\u07F9\\u07FE\\u07FF\\u0830-\\u083E\\u085E\\u0888\\u0964\\u0965\\u0970\\u09F2\\u09F3\\u09FA\\u09FB\\u09FD\\u0A76\\u0AF0\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C77\\u0C7F\\u0C84\\u0D4F\\u0D79\\u0DF4\\u0E3F\\u0E4F\\u0E5A\\u0E5B\\u0F01-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F85\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE-\\u0FDA\\u104A-\\u104F\\u109E\\u109F\\u10FB\\u1360-\\u1368\\u1390-\\u1399\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DB\\u1800-\\u180A\\u1940\\u1944\\u1945\\u19DE-\\u19FF\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B4E\\u1B4F\\u1B5A-\\u1B6A\\u1B74-\\u1B7F\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2010-\\u2027\\u2030-\\u205E\\u207A-\\u207E\\u208A-\\u208E\\u20A0-\\u20C0\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2429\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2775\\u2794-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2BFF\\u2CE5-\\u2CEA\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E5D\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFF\\u3001-\\u3004\\u3008-\\u3020\\u3030\\u3036\\u3037\\u303D-\\u303F\\u309B\\u309C\\u30A0\\u30FB\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E5\\u31EF\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAA77-\\uAA79\\uAADE\\uAADF\\uAAF0\\uAAF1\\uAB5B\\uAB6A\\uAB6B\\uABEB\\uFB29\\uFBB2-\\uFBC2\\uFD3E-\\uFD4F\\uFDCF\\uFDFC-\\uFDFF\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFF01-\\uFF0F\\uFF1A-\\uFF20\\uFF3B-\\uFF40\\uFF5B-\\uFF65\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD]|\\uD800[\\uDD00-\\uDD02\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9C\\uDDA0\\uDDD0-\\uDDFC\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDC77\\uDC78\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEC8\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDD6E\\uDD8E\\uDD8F\\uDEAD\\uDF55-\\uDF59\\uDF86-\\uDF89]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9\\uDFD4\\uDFD5\\uDFD7\\uDFD8]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDEB9\\uDF3C-\\uDF3F]|\\uD806[\\uDC3B\\uDD44-\\uDD46\\uDDE2\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2\\uDF00-\\uDF09\\uDFE1]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8\\uDF43-\\uDF4F\\uDFD5-\\uDFF1\\uDFFF]|\\uD809[\\uDC70-\\uDC74]|\\uD80B[\\uDFF1\\uDFF2]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3F\\uDF44\\uDF45]|\\uD81B[\\uDD6D-\\uDD6F\\uDE97-\\uDE9A\\uDFE2]|\\uD82F[\\uDC9C\\uDC9F]|\\uD833[\\uDC00-\\uDCEF\\uDD00-\\uDEB3\\uDF50-\\uDFC3]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDEA\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85-\\uDE8B]|\\uD838[\\uDD4F\\uDEFF]|\\uD839\\uDDFF|\\uD83A[\\uDD5E\\uDD5F]|\\uD83B[\\uDCAC\\uDCB0\\uDD2E\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD0D-\\uDDAD\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED7\\uDEDC-\\uDEEC\\uDEF0-\\uDEFC\\uDF00-\\uDF76\\uDF7B-\\uDFD9\\uDFE0-\\uDFEB\\uDFF0]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDCB0-\\uDCBB\\uDCC0\\uDCC1\\uDD00-\\uDE53\\uDE60-\\uDE6D\\uDE70-\\uDE7C\\uDE80-\\uDE89\\uDE8F-\\uDEC6\\uDECE-\\uDEDC\\uDEDF-\\uDEE9\\uDEF0-\\uDEF8\\uDF00-\\uDF92\\uDF94-\\uDFEF])/;\nvar _punctuationOrSpace = /(?:[\\t-\\r -\\/:-@\\[-`\\{-~\\xA0-\\xA9\\xAB\\xAC\\xAE-\\xB1\\xB4\\xB6-\\xB8\\xBB\\xBF\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u037E\\u0384\\u0385\\u0387\\u03F6\\u0482\\u055A-\\u055F\\u0589\\u058A\\u058D-\\u058F\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0606-\\u060F\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u06DE\\u06E9\\u06FD\\u06FE\\u0700-\\u070D\\u07F6-\\u07F9\\u07FE\\u07FF\\u0830-\\u083E\\u085E\\u0888\\u0964\\u0965\\u0970\\u09F2\\u09F3\\u09FA\\u09FB\\u09FD\\u0A76\\u0AF0\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C77\\u0C7F\\u0C84\\u0D4F\\u0D79\\u0DF4\\u0E3F\\u0E4F\\u0E5A\\u0E5B\\u0F01-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F85\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE-\\u0FDA\\u104A-\\u104F\\u109E\\u109F\\u10FB\\u1360-\\u1368\\u1390-\\u1399\\u1400\\u166D\\u166E\\u1680\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DB\\u1800-\\u180A\\u1940\\u1944\\u1945\\u19DE-\\u19FF\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B4E\\u1B4F\\u1B5A-\\u1B6A\\u1B74-\\u1B7F\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2000-\\u200A\\u2010-\\u2029\\u202F-\\u205F\\u207A-\\u207E\\u208A-\\u208E\\u20A0-\\u20C0\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2429\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2775\\u2794-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2BFF\\u2CE5-\\u2CEA\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E5D\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u3004\\u3008-\\u3020\\u3030\\u3036\\u3037\\u303D-\\u303F\\u309B\\u309C\\u30A0\\u30FB\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E5\\u31EF\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAA77-\\uAA79\\uAADE\\uAADF\\uAAF0\\uAAF1\\uAB5B\\uAB6A\\uAB6B\\uABEB\\uFB29\\uFBB2-\\uFBC2\\uFD3E-\\uFD4F\\uFDCF\\uFDFC-\\uFDFF\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFEFF\\uFF01-\\uFF0F\\uFF1A-\\uFF20\\uFF3B-\\uFF40\\uFF5B-\\uFF65\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD]|\\uD800[\\uDD00-\\uDD02\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9C\\uDDA0\\uDDD0-\\uDDFC\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDC77\\uDC78\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEC8\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDD6E\\uDD8E\\uDD8F\\uDEAD\\uDF55-\\uDF59\\uDF86-\\uDF89]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9\\uDFD4\\uDFD5\\uDFD7\\uDFD8]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDEB9\\uDF3C-\\uDF3F]|\\uD806[\\uDC3B\\uDD44-\\uDD46\\uDDE2\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2\\uDF00-\\uDF09\\uDFE1]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8\\uDF43-\\uDF4F\\uDFD5-\\uDFF1\\uDFFF]|\\uD809[\\uDC70-\\uDC74]|\\uD80B[\\uDFF1\\uDFF2]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3F\\uDF44\\uDF45]|\\uD81B[\\uDD6D-\\uDD6F\\uDE97-\\uDE9A\\uDFE2]|\\uD82F[\\uDC9C\\uDC9F]|\\uD833[\\uDC00-\\uDCEF\\uDD00-\\uDEB3\\uDF50-\\uDFC3]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDEA\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85-\\uDE8B]|\\uD838[\\uDD4F\\uDEFF]|\\uD839\\uDDFF|\\uD83A[\\uDD5E\\uDD5F]|\\uD83B[\\uDCAC\\uDCB0\\uDD2E\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD0D-\\uDDAD\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED7\\uDEDC-\\uDEEC\\uDEF0-\\uDEFC\\uDF00-\\uDF76\\uDF7B-\\uDFD9\\uDFE0-\\uDFEB\\uDFF0]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDCB0-\\uDCBB\\uDCC0\\uDCC1\\uDD00-\\uDE53\\uDE60-\\uDE6D\\uDE70-\\uDE7C\\uDE80-\\uDE89\\uDE8F-\\uDEC6\\uDECE-\\uDEDC\\uDEDF-\\uDEE9\\uDEF0-\\uDEF8\\uDF00-\\uDF92\\uDF94-\\uDFEF])/;\nvar _notPunctuationOrSpace = /(?:[\\0-\\x08\\x0E-\\x1F0-9A-Za-z\\x7F-\\x9F\\xAA\\xAD\\xB2\\xB3\\xB5\\xB9\\xBA\\xBC-\\xBE\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376-\\u037D\\u037F-\\u0383\\u0386\\u0388-\\u03F5\\u03F7-\\u0481\\u0483-\\u0559\\u0560-\\u0588\\u058B\\u058C\\u0590-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7-\\u05F2\\u05F5-\\u0605\\u0610-\\u061A\\u061C\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DD\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u070E-\\u07F5\\u07FA-\\u07FD\\u0800-\\u082F\\u083F-\\u085D\\u085F-\\u0887\\u0889-\\u0963\\u0966-\\u096F\\u0971-\\u09F1\\u09F4-\\u09F9\\u09FC\\u09FE-\\u0A75\\u0A77-\\u0AEF\\u0AF2-\\u0B6F\\u0B71-\\u0BF2\\u0BFB-\\u0C76\\u0C78-\\u0C7E\\u0C80-\\u0C83\\u0C85-\\u0D4E\\u0D50-\\u0D78\\u0D7A-\\u0DF3\\u0DF5-\\u0E3E\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E5C-\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F33\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F84\\u0F86-\\u0FBD\\u0FC6\\u0FCD\\u0FDB-\\u1049\\u1050-\\u109D\\u10A0-\\u10FA\\u10FC-\\u135F\\u1369-\\u138F\\u139A-\\u13FF\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u169D-\\u16EA\\u16EE-\\u1734\\u1737-\\u17D3\\u17D7\\u17DC-\\u17FF\\u180B-\\u193F\\u1941-\\u1943\\u1946-\\u19DD\\u1A00-\\u1A1D\\u1A20-\\u1A9F\\u1AA7\\u1AAE-\\u1B4D\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BFB\\u1C00-\\u1C3A\\u1C40-\\u1C7D\\u1C80-\\u1CBF\\u1CC8-\\u1CD2\\u1CD4-\\u1FBC\\u1FBE\\u1FC2-\\u1FCC\\u1FD0-\\u1FDC\\u1FE0-\\u1FEC\\u1FF0-\\u1FFC\\u1FFF\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2079\\u207F-\\u2089\\u208F-\\u209F\\u20C1-\\u20FF\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u218C-\\u218F\\u242A-\\u243F\\u244B-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2B74\\u2B75\\u2B96\\u2C00-\\u2CE4\\u2CEB-\\u2CF8\\u2CFD\\u2D00-\\u2D6F\\u2D71-\\u2DFF\\u2E2F\\u2E5E-\\u2E7F\\u2E9A\\u2EF4-\\u2EFF\\u2FD6-\\u2FEF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3040-\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u318F\\u3192-\\u3195\\u31A0-\\u31BF\\u31E6-\\u31EE\\u31F0-\\u31FF\\u321F-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DBF\\u4E00-\\uA48F\\uA4C7-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA672\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA6F8-\\uA6FF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA827\\uA82C-\\uA835\\uA83A-\\uA873\\uA878-\\uA8CD\\uA8D0-\\uA8F7\\uA8FB\\uA8FD-\\uA92D\\uA930-\\uA95E\\uA960-\\uA9C0\\uA9CE-\\uA9DD\\uA9E0-\\uAA5B\\uAA60-\\uAA76\\uAA7A-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAB5A\\uAB5C-\\uAB69\\uAB6C-\\uABEA\\uABEC-\\uD7FF\\uE000-\\uFB28\\uFB2A-\\uFBB1\\uFBC3-\\uFD3D\\uFD50-\\uFDCE\\uFDD0-\\uFDFB\\uFE00-\\uFE0F\\uFE1A-\\uFE2F\\uFE53\\uFE67\\uFE6C-\\uFEFE\\uFF00\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFDF\\uFFE7\\uFFEF-\\uFFFB\\uFFFE\\uFFFF]|\\uD800[\\uDC00-\\uDCFF\\uDD03-\\uDD36\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDD8F\\uDD9D-\\uDD9F\\uDDA1-\\uDDCF\\uDDFD-\\uDF9E\\uDFA0-\\uDFCF\\uDFD1-\\uDFFF]|\\uD801[\\uDC00-\\uDD6E\\uDD70-\\uDFFF]|\\uD802[\\uDC00-\\uDC56\\uDC58-\\uDC76\\uDC79-\\uDD1E\\uDD20-\\uDD3E\\uDD40-\\uDE4F\\uDE59-\\uDE7E\\uDE80-\\uDEC7\\uDEC9-\\uDEEF\\uDEF7-\\uDF38\\uDF40-\\uDF98\\uDF9D-\\uDFFF]|\\uD803[\\uDC00-\\uDD6D\\uDD6F-\\uDD8D\\uDD90-\\uDEAC\\uDEAE-\\uDF54\\uDF5A-\\uDF85\\uDF8A-\\uDFFF]|\\uD804[\\uDC00-\\uDC46\\uDC4E-\\uDCBA\\uDCBD\\uDCC2-\\uDD3F\\uDD44-\\uDD73\\uDD76-\\uDDC4\\uDDC9-\\uDDCC\\uDDCE-\\uDDDA\\uDDDC\\uDDE0-\\uDE37\\uDE3E-\\uDEA8\\uDEAA-\\uDFD3\\uDFD6\\uDFD9-\\uDFFF]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC5C\\uDC5E-\\uDCC5\\uDCC7-\\uDDC0\\uDDD8-\\uDE40\\uDE44-\\uDE5F\\uDE6D-\\uDEB8\\uDEBA-\\uDF3B\\uDF40-\\uDFFF]|\\uD806[\\uDC00-\\uDC3A\\uDC3C-\\uDD43\\uDD47-\\uDDE1\\uDDE3-\\uDE3E\\uDE47-\\uDE99\\uDE9D\\uDEA3-\\uDEFF\\uDF0A-\\uDFE0\\uDFE2-\\uDFFF]|\\uD807[\\uDC00-\\uDC40\\uDC46-\\uDC6F\\uDC72-\\uDEF6\\uDEF9-\\uDF42\\uDF50-\\uDFD4\\uDFF2-\\uDFFE]|[\\uD808\\uD80A\\uD80C-\\uD819\\uD81C-\\uD82E\\uD830-\\uD832\\uD837\\uD83F-\\uDBFF][\\uDC00-\\uDFFF]|\\uD809[\\uDC00-\\uDC6F\\uDC75-\\uDFFF]|\\uD80B[\\uDC00-\\uDFF0\\uDFF3-\\uDFFF]|\\uD81A[\\uDC00-\\uDE6D\\uDE70-\\uDEF4\\uDEF6-\\uDF36\\uDF40-\\uDF43\\uDF46-\\uDFFF]|\\uD81B[\\uDC00-\\uDD6C\\uDD70-\\uDE96\\uDE9B-\\uDFE1\\uDFE3-\\uDFFF]|\\uD82F[\\uDC00-\\uDC9B\\uDC9D\\uDC9E\\uDCA0-\\uDFFF]|\\uD833[\\uDCF0-\\uDCFF\\uDEB4-\\uDF4F\\uDFC4-\\uDFFF]|\\uD834[\\uDCF6-\\uDCFF\\uDD27\\uDD28\\uDD65-\\uDD69\\uDD6D-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDDEB-\\uDDFF\\uDE42-\\uDE44\\uDE46-\\uDEFF\\uDF57-\\uDFFF]|\\uD835[\\uDC00-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE8C-\\uDFFF]|\\uD838[\\uDC00-\\uDD4E\\uDD50-\\uDEFE\\uDF00-\\uDFFF]|\\uD839[\\uDC00-\\uDDFE\\uDE00-\\uDFFF]|\\uD83A[\\uDC00-\\uDD5D\\uDD60-\\uDFFF]|\\uD83B[\\uDC00-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDD2D\\uDD2F-\\uDEEF\\uDEF2-\\uDFFF]|\\uD83C[\\uDC2C-\\uDC2F\\uDC94-\\uDC9F\\uDCAF\\uDCB0\\uDCC0\\uDCD0\\uDCF6-\\uDD0C\\uDDAE-\\uDDE5\\uDE03-\\uDE0F\\uDE3C-\\uDE3F\\uDE49-\\uDE4F\\uDE52-\\uDE5F\\uDE66-\\uDEFF]|\\uD83D[\\uDED8-\\uDEDB\\uDEED-\\uDEEF\\uDEFD-\\uDEFF\\uDF77-\\uDF7A\\uDFDA-\\uDFDF\\uDFEC-\\uDFEF\\uDFF1-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE\\uDCAF\\uDCBC-\\uDCBF\\uDCC2-\\uDCFF\\uDE54-\\uDE5F\\uDE6E\\uDE6F\\uDE7D-\\uDE7F\\uDE8A-\\uDE8E\\uDEC7-\\uDECD\\uDEDD\\uDEDE\\uDEEA-\\uDEEF\\uDEF9-\\uDEFF\\uDF93\\uDFF0-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/;\nvar punctuation = edit(/^((?![*_])punctSpace)/, \"u\").replace(/punctSpace/g, _punctuationOrSpace).getRegex();\nvar _punctuationGfmStrongEm = /(?!~)(?:[!-\\/:-@\\[-`\\{-~\\xA1-\\xA9\\xAB\\xAC\\xAE-\\xB1\\xB4\\xB6-\\xB8\\xBB\\xBF\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u037E\\u0384\\u0385\\u0387\\u03F6\\u0482\\u055A-\\u055F\\u0589\\u058A\\u058D-\\u058F\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0606-\\u060F\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u06DE\\u06E9\\u06FD\\u06FE\\u0700-\\u070D\\u07F6-\\u07F9\\u07FE\\u07FF\\u0830-\\u083E\\u085E\\u0888\\u0964\\u0965\\u0970\\u09F2\\u09F3\\u09FA\\u09FB\\u09FD\\u0A76\\u0AF0\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C77\\u0C7F\\u0C84\\u0D4F\\u0D79\\u0DF4\\u0E3F\\u0E4F\\u0E5A\\u0E5B\\u0F01-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F85\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE-\\u0FDA\\u104A-\\u104F\\u109E\\u109F\\u10FB\\u1360-\\u1368\\u1390-\\u1399\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DB\\u1800-\\u180A\\u1940\\u1944\\u1945\\u19DE-\\u19FF\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B4E\\u1B4F\\u1B5A-\\u1B6A\\u1B74-\\u1B7F\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2010-\\u2027\\u2030-\\u205E\\u207A-\\u207E\\u208A-\\u208E\\u20A0-\\u20C0\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2429\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2775\\u2794-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2BFF\\u2CE5-\\u2CEA\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E5D\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFF\\u3001-\\u3004\\u3008-\\u3020\\u3030\\u3036\\u3037\\u303D-\\u303F\\u309B\\u309C\\u30A0\\u30FB\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E5\\u31EF\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAA77-\\uAA79\\uAADE\\uAADF\\uAAF0\\uAAF1\\uAB5B\\uAB6A\\uAB6B\\uABEB\\uFB29\\uFBB2-\\uFBC2\\uFD3E-\\uFD4F\\uFDCF\\uFDFC-\\uFDFF\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFF01-\\uFF0F\\uFF1A-\\uFF20\\uFF3B-\\uFF40\\uFF5B-\\uFF65\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD]|\\uD800[\\uDD00-\\uDD02\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9C\\uDDA0\\uDDD0-\\uDDFC\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDC77\\uDC78\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEC8\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDD6E\\uDD8E\\uDD8F\\uDEAD\\uDF55-\\uDF59\\uDF86-\\uDF89]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9\\uDFD4\\uDFD5\\uDFD7\\uDFD8]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDEB9\\uDF3C-\\uDF3F]|\\uD806[\\uDC3B\\uDD44-\\uDD46\\uDDE2\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2\\uDF00-\\uDF09\\uDFE1]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8\\uDF43-\\uDF4F\\uDFD5-\\uDFF1\\uDFFF]|\\uD809[\\uDC70-\\uDC74]|\\uD80B[\\uDFF1\\uDFF2]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3F\\uDF44\\uDF45]|\\uD81B[\\uDD6D-\\uDD6F\\uDE97-\\uDE9A\\uDFE2]|\\uD82F[\\uDC9C\\uDC9F]|\\uD833[\\uDC00-\\uDCEF\\uDD00-\\uDEB3\\uDF50-\\uDFC3]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDEA\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85-\\uDE8B]|\\uD838[\\uDD4F\\uDEFF]|\\uD839\\uDDFF|\\uD83A[\\uDD5E\\uDD5F]|\\uD83B[\\uDCAC\\uDCB0\\uDD2E\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD0D-\\uDDAD\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED7\\uDEDC-\\uDEEC\\uDEF0-\\uDEFC\\uDF00-\\uDF76\\uDF7B-\\uDFD9\\uDFE0-\\uDFEB\\uDFF0]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDCB0-\\uDCBB\\uDCC0\\uDCC1\\uDD00-\\uDE53\\uDE60-\\uDE6D\\uDE70-\\uDE7C\\uDE80-\\uDE89\\uDE8F-\\uDEC6\\uDECE-\\uDEDC\\uDEDF-\\uDEE9\\uDEF0-\\uDEF8\\uDF00-\\uDF92\\uDF94-\\uDFEF])/;\nvar _punctuationOrSpaceGfmStrongEm = /(?!~)(?:[\\t-\\r -\\/:-@\\[-`\\{-~\\xA0-\\xA9\\xAB\\xAC\\xAE-\\xB1\\xB4\\xB6-\\xB8\\xBB\\xBF\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u037E\\u0384\\u0385\\u0387\\u03F6\\u0482\\u055A-\\u055F\\u0589\\u058A\\u058D-\\u058F\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0606-\\u060F\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u06DE\\u06E9\\u06FD\\u06FE\\u0700-\\u070D\\u07F6-\\u07F9\\u07FE\\u07FF\\u0830-\\u083E\\u085E\\u0888\\u0964\\u0965\\u0970\\u09F2\\u09F3\\u09FA\\u09FB\\u09FD\\u0A76\\u0AF0\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C77\\u0C7F\\u0C84\\u0D4F\\u0D79\\u0DF4\\u0E3F\\u0E4F\\u0E5A\\u0E5B\\u0F01-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F85\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE-\\u0FDA\\u104A-\\u104F\\u109E\\u109F\\u10FB\\u1360-\\u1368\\u1390-\\u1399\\u1400\\u166D\\u166E\\u1680\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DB\\u1800-\\u180A\\u1940\\u1944\\u1945\\u19DE-\\u19FF\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B4E\\u1B4F\\u1B5A-\\u1B6A\\u1B74-\\u1B7F\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2000-\\u200A\\u2010-\\u2029\\u202F-\\u205F\\u207A-\\u207E\\u208A-\\u208E\\u20A0-\\u20C0\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2429\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2775\\u2794-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2BFF\\u2CE5-\\u2CEA\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E5D\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u3004\\u3008-\\u3020\\u3030\\u3036\\u3037\\u303D-\\u303F\\u309B\\u309C\\u30A0\\u30FB\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E5\\u31EF\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAA77-\\uAA79\\uAADE\\uAADF\\uAAF0\\uAAF1\\uAB5B\\uAB6A\\uAB6B\\uABEB\\uFB29\\uFBB2-\\uFBC2\\uFD3E-\\uFD4F\\uFDCF\\uFDFC-\\uFDFF\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFEFF\\uFF01-\\uFF0F\\uFF1A-\\uFF20\\uFF3B-\\uFF40\\uFF5B-\\uFF65\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD]|\\uD800[\\uDD00-\\uDD02\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9C\\uDDA0\\uDDD0-\\uDDFC\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDC77\\uDC78\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEC8\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDD6E\\uDD8E\\uDD8F\\uDEAD\\uDF55-\\uDF59\\uDF86-\\uDF89]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9\\uDFD4\\uDFD5\\uDFD7\\uDFD8]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDEB9\\uDF3C-\\uDF3F]|\\uD806[\\uDC3B\\uDD44-\\uDD46\\uDDE2\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2\\uDF00-\\uDF09\\uDFE1]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8\\uDF43-\\uDF4F\\uDFD5-\\uDFF1\\uDFFF]|\\uD809[\\uDC70-\\uDC74]|\\uD80B[\\uDFF1\\uDFF2]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3F\\uDF44\\uDF45]|\\uD81B[\\uDD6D-\\uDD6F\\uDE97-\\uDE9A\\uDFE2]|\\uD82F[\\uDC9C\\uDC9F]|\\uD833[\\uDC00-\\uDCEF\\uDD00-\\uDEB3\\uDF50-\\uDFC3]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDEA\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85-\\uDE8B]|\\uD838[\\uDD4F\\uDEFF]|\\uD839\\uDDFF|\\uD83A[\\uDD5E\\uDD5F]|\\uD83B[\\uDCAC\\uDCB0\\uDD2E\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD0D-\\uDDAD\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED7\\uDEDC-\\uDEEC\\uDEF0-\\uDEFC\\uDF00-\\uDF76\\uDF7B-\\uDFD9\\uDFE0-\\uDFEB\\uDFF0]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDCB0-\\uDCBB\\uDCC0\\uDCC1\\uDD00-\\uDE53\\uDE60-\\uDE6D\\uDE70-\\uDE7C\\uDE80-\\uDE89\\uDE8F-\\uDEC6\\uDECE-\\uDEDC\\uDEDF-\\uDEE9\\uDEF0-\\uDEF8\\uDF00-\\uDF92\\uDF94-\\uDFEF])/;\nvar _notPunctuationOrSpaceGfmStrongEm = /(?:(?:[\\0-\\x08\\x0E-\\x1F0-9A-Za-z\\x7F-\\x9F\\xAA\\xAD\\xB2\\xB3\\xB5\\xB9\\xBA\\xBC-\\xBE\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376-\\u037D\\u037F-\\u0383\\u0386\\u0388-\\u03F5\\u03F7-\\u0481\\u0483-\\u0559\\u0560-\\u0588\\u058B\\u058C\\u0590-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7-\\u05F2\\u05F5-\\u0605\\u0610-\\u061A\\u061C\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DD\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u070E-\\u07F5\\u07FA-\\u07FD\\u0800-\\u082F\\u083F-\\u085D\\u085F-\\u0887\\u0889-\\u0963\\u0966-\\u096F\\u0971-\\u09F1\\u09F4-\\u09F9\\u09FC\\u09FE-\\u0A75\\u0A77-\\u0AEF\\u0AF2-\\u0B6F\\u0B71-\\u0BF2\\u0BFB-\\u0C76\\u0C78-\\u0C7E\\u0C80-\\u0C83\\u0C85-\\u0D4E\\u0D50-\\u0D78\\u0D7A-\\u0DF3\\u0DF5-\\u0E3E\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E5C-\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F33\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F84\\u0F86-\\u0FBD\\u0FC6\\u0FCD\\u0FDB-\\u1049\\u1050-\\u109D\\u10A0-\\u10FA\\u10FC-\\u135F\\u1369-\\u138F\\u139A-\\u13FF\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u169D-\\u16EA\\u16EE-\\u1734\\u1737-\\u17D3\\u17D7\\u17DC-\\u17FF\\u180B-\\u193F\\u1941-\\u1943\\u1946-\\u19DD\\u1A00-\\u1A1D\\u1A20-\\u1A9F\\u1AA7\\u1AAE-\\u1B4D\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BFB\\u1C00-\\u1C3A\\u1C40-\\u1C7D\\u1C80-\\u1CBF\\u1CC8-\\u1CD2\\u1CD4-\\u1FBC\\u1FBE\\u1FC2-\\u1FCC\\u1FD0-\\u1FDC\\u1FE0-\\u1FEC\\u1FF0-\\u1FFC\\u1FFF\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2079\\u207F-\\u2089\\u208F-\\u209F\\u20C1-\\u20FF\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u218C-\\u218F\\u242A-\\u243F\\u244B-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2B74\\u2B75\\u2B96\\u2C00-\\u2CE4\\u2CEB-\\u2CF8\\u2CFD\\u2D00-\\u2D6F\\u2D71-\\u2DFF\\u2E2F\\u2E5E-\\u2E7F\\u2E9A\\u2EF4-\\u2EFF\\u2FD6-\\u2FEF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3040-\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u318F\\u3192-\\u3195\\u31A0-\\u31BF\\u31E6-\\u31EE\\u31F0-\\u31FF\\u321F-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DBF\\u4E00-\\uA48F\\uA4C7-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA672\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA6F8-\\uA6FF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA827\\uA82C-\\uA835\\uA83A-\\uA873\\uA878-\\uA8CD\\uA8D0-\\uA8F7\\uA8FB\\uA8FD-\\uA92D\\uA930-\\uA95E\\uA960-\\uA9C0\\uA9CE-\\uA9DD\\uA9E0-\\uAA5B\\uAA60-\\uAA76\\uAA7A-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAB5A\\uAB5C-\\uAB69\\uAB6C-\\uABEA\\uABEC-\\uD7FF\\uE000-\\uFB28\\uFB2A-\\uFBB1\\uFBC3-\\uFD3D\\uFD50-\\uFDCE\\uFDD0-\\uFDFB\\uFE00-\\uFE0F\\uFE1A-\\uFE2F\\uFE53\\uFE67\\uFE6C-\\uFEFE\\uFF00\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFDF\\uFFE7\\uFFEF-\\uFFFB\\uFFFE\\uFFFF]|\\uD800[\\uDC00-\\uDCFF\\uDD03-\\uDD36\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDD8F\\uDD9D-\\uDD9F\\uDDA1-\\uDDCF\\uDDFD-\\uDF9E\\uDFA0-\\uDFCF\\uDFD1-\\uDFFF]|\\uD801[\\uDC00-\\uDD6E\\uDD70-\\uDFFF]|\\uD802[\\uDC00-\\uDC56\\uDC58-\\uDC76\\uDC79-\\uDD1E\\uDD20-\\uDD3E\\uDD40-\\uDE4F\\uDE59-\\uDE7E\\uDE80-\\uDEC7\\uDEC9-\\uDEEF\\uDEF7-\\uDF38\\uDF40-\\uDF98\\uDF9D-\\uDFFF]|\\uD803[\\uDC00-\\uDD6D\\uDD6F-\\uDD8D\\uDD90-\\uDEAC\\uDEAE-\\uDF54\\uDF5A-\\uDF85\\uDF8A-\\uDFFF]|\\uD804[\\uDC00-\\uDC46\\uDC4E-\\uDCBA\\uDCBD\\uDCC2-\\uDD3F\\uDD44-\\uDD73\\uDD76-\\uDDC4\\uDDC9-\\uDDCC\\uDDCE-\\uDDDA\\uDDDC\\uDDE0-\\uDE37\\uDE3E-\\uDEA8\\uDEAA-\\uDFD3\\uDFD6\\uDFD9-\\uDFFF]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC5C\\uDC5E-\\uDCC5\\uDCC7-\\uDDC0\\uDDD8-\\uDE40\\uDE44-\\uDE5F\\uDE6D-\\uDEB8\\uDEBA-\\uDF3B\\uDF40-\\uDFFF]|\\uD806[\\uDC00-\\uDC3A\\uDC3C-\\uDD43\\uDD47-\\uDDE1\\uDDE3-\\uDE3E\\uDE47-\\uDE99\\uDE9D\\uDEA3-\\uDEFF\\uDF0A-\\uDFE0\\uDFE2-\\uDFFF]|\\uD807[\\uDC00-\\uDC40\\uDC46-\\uDC6F\\uDC72-\\uDEF6\\uDEF9-\\uDF42\\uDF50-\\uDFD4\\uDFF2-\\uDFFE]|[\\uD808\\uD80A\\uD80C-\\uD819\\uD81C-\\uD82E\\uD830-\\uD832\\uD837\\uD83F-\\uDBFF][\\uDC00-\\uDFFF]|\\uD809[\\uDC00-\\uDC6F\\uDC75-\\uDFFF]|\\uD80B[\\uDC00-\\uDFF0\\uDFF3-\\uDFFF]|\\uD81A[\\uDC00-\\uDE6D\\uDE70-\\uDEF4\\uDEF6-\\uDF36\\uDF40-\\uDF43\\uDF46-\\uDFFF]|\\uD81B[\\uDC00-\\uDD6C\\uDD70-\\uDE96\\uDE9B-\\uDFE1\\uDFE3-\\uDFFF]|\\uD82F[\\uDC00-\\uDC9B\\uDC9D\\uDC9E\\uDCA0-\\uDFFF]|\\uD833[\\uDCF0-\\uDCFF\\uDEB4-\\uDF4F\\uDFC4-\\uDFFF]|\\uD834[\\uDCF6-\\uDCFF\\uDD27\\uDD28\\uDD65-\\uDD69\\uDD6D-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDDEB-\\uDDFF\\uDE42-\\uDE44\\uDE46-\\uDEFF\\uDF57-\\uDFFF]|\\uD835[\\uDC00-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE8C-\\uDFFF]|\\uD838[\\uDC00-\\uDD4E\\uDD50-\\uDEFE\\uDF00-\\uDFFF]|\\uD839[\\uDC00-\\uDDFE\\uDE00-\\uDFFF]|\\uD83A[\\uDC00-\\uDD5D\\uDD60-\\uDFFF]|\\uD83B[\\uDC00-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDD2D\\uDD2F-\\uDEEF\\uDEF2-\\uDFFF]|\\uD83C[\\uDC2C-\\uDC2F\\uDC94-\\uDC9F\\uDCAF\\uDCB0\\uDCC0\\uDCD0\\uDCF6-\\uDD0C\\uDDAE-\\uDDE5\\uDE03-\\uDE0F\\uDE3C-\\uDE3F\\uDE49-\\uDE4F\\uDE52-\\uDE5F\\uDE66-\\uDEFF]|\\uD83D[\\uDED8-\\uDEDB\\uDEED-\\uDEEF\\uDEFD-\\uDEFF\\uDF77-\\uDF7A\\uDFDA-\\uDFDF\\uDFEC-\\uDFEF\\uDFF1-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE\\uDCAF\\uDCBC-\\uDCBF\\uDCC2-\\uDCFF\\uDE54-\\uDE5F\\uDE6E\\uDE6F\\uDE7D-\\uDE7F\\uDE8A-\\uDE8E\\uDEC7-\\uDECD\\uDEDD\\uDEDE\\uDEEA-\\uDEEF\\uDEF9-\\uDEFF\\uDF93\\uDFF0-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])|~)/;\nvar blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\nvar emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\nvar emStrongLDelim = edit(emStrongLDelimCore, \"u\").replace(/punct/g, _punctuation).getRegex();\nvar emStrongLDelimGfm = edit(emStrongLDelimCore, \"u\").replace(/punct/g, _punctuationGfmStrongEm).getRegex();\nvar emStrongRDelimAstCore = \"^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)|notPunctSpace(\\\\*+)(?=notPunctSpace)\";\nvar emStrongRDelimAst = edit(emStrongRDelimAstCore, \"gu\").replace(/notPunctSpace/g, _notPunctuationOrSpace).replace(/punctSpace/g, _punctuationOrSpace).replace(/punct/g, _punctuation).getRegex();\nvar emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, \"gu\").replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm).replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm).replace(/punct/g, _punctuationGfmStrongEm).getRegex();\nvar emStrongRDelimUnd = edit(\"^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)|[^_]+(?=[^_])|(?!_)punct(_+)(?=[\\\\s]|$)|notPunctSpace(_+)(?!_)(?=punctSpace|$)|(?!_)punctSpace(_+)(?=notPunctSpace)|[\\\\s](_+)(?!_)(?=punct)|(?!_)punct(_+)(?!_)(?=punct)\", \"gu\").replace(/notPunctSpace/g, _notPunctuationOrSpace).replace(/punctSpace/g, _punctuationOrSpace).replace(/punct/g, _punctuation).getRegex();\nvar anyPunctuation = edit(/\\\\(punct)/, \"gu\").replace(/punct/g, _punctuation).getRegex();\nvar autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/).replace(\"scheme\", /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace(\"email\", /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex();\nvar _inlineComment = edit(_comment).replace(\"(?:-->|$)\", \"-->\").getRegex();\nvar tag = edit(\"^comment|^</[a-zA-Z][\\\\w:-]*\\\\s*>|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>|^<\\\\?[\\\\s\\\\S]*?\\\\?>|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\").replace(\"comment\", _inlineComment).replace(\"attribute\", /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/).getRegex();\nvar _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nvar link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:(?:[ \\t]*(?:\\n[ \\t]*)?)(title))?\\s*\\)/).replace(\"label\", _inlineLabel).replace(\"href\", /<(?:\\\\.|[^\\n<>\\\\])+>|[^ \\t\\n\\x00-\\x1f]*/).replace(\"title\", /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/).getRegex();\nvar reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/).replace(\"label\", _inlineLabel).replace(\"ref\", _blockLabel).getRegex();\nvar nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/).replace(\"ref\", _blockLabel).getRegex();\nvar reflinkSearch = edit(\"reflink|nolink(?!\\\\()\", \"g\").replace(\"reflink\", reflink).replace(\"nolink\", nolink).getRegex();\nvar inlineNormal = {\n  _backpedal: noopTest,\n  // only used for GFM url\n  anyPunctuation,\n  autolink,\n  blockSkip,\n  br,\n  code: inlineCode,\n  del: noopTest,\n  emStrongLDelim,\n  emStrongRDelimAst,\n  emStrongRDelimUnd,\n  escape,\n  link,\n  nolink,\n  punctuation,\n  reflink,\n  reflinkSearch,\n  tag,\n  text: inlineText,\n  url: noopTest\n};\nvar inlinePedantic = _objectSpread(_objectSpread({}, inlineNormal), {}, {\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace(\"label\", _inlineLabel).getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace(\"label\", _inlineLabel).getRegex()\n});\nvar inlineGfm = _objectSpread(_objectSpread({}, inlineNormal), {}, {\n  emStrongRDelimAst: emStrongRDelimAstGfm,\n  emStrongLDelim: emStrongLDelimGfm,\n  url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, \"i\").replace(\"email\", /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(),\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\nvar inlineBreaks = _objectSpread(_objectSpread({}, inlineGfm), {}, {\n  br: edit(br).replace(\"{2,}\", \"*\").getRegex(),\n  text: edit(inlineGfm.text).replace(\"\\\\b_\", \"\\\\b_| {2,}\\\\n\").replace(/\\{2,\\}/g, \"*\").getRegex()\n});\nvar block = {\n  normal: blockNormal,\n  gfm: blockGfm,\n  pedantic: blockPedantic\n};\nvar inline = {\n  normal: inlineNormal,\n  gfm: inlineGfm,\n  breaks: inlineBreaks,\n  pedantic: inlinePedantic\n};\n\n// src/helpers.ts\nvar escapeReplacements = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&#39;\"\n};\nvar getEscapeReplacement = ch => escapeReplacements[ch];\nfunction escape2(html2, encode) {\n  if (encode) {\n    if (other.escapeTest.test(html2)) {\n      return html2.replace(other.escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (other.escapeTestNoEncode.test(html2)) {\n      return html2.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n  return html2;\n}\nfunction cleanUrl(href) {\n  try {\n    href = encodeURI(href).replace(other.percentDecode, \"%\");\n  } catch (_unused) {\n    return null;\n  }\n  return href;\n}\nfunction splitCells(tableRow, count) {\n  var _cells$at;\n  const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n      let escaped = false;\n      let curr = offset;\n      while (--curr >= 0 && str[curr] === \"\\\\\") escaped = !escaped;\n      if (escaped) {\n        return \"|\";\n      } else {\n        return \" |\";\n      }\n    }),\n    cells = row.split(other.splitPipe);\n  let i = 0;\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !((_cells$at = cells.at(-1)) !== null && _cells$at !== void 0 && _cells$at.trim())) {\n    cells.pop();\n  }\n  if (count) {\n    if (cells.length > count) {\n      cells.splice(count);\n    } else {\n      while (cells.length < count) cells.push(\"\");\n    }\n  }\n  for (; i < cells.length; i++) {\n    cells[i] = cells[i].trim().replace(other.slashPipe, \"|\");\n  }\n  return cells;\n}\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return \"\";\n  }\n  let suffLen = 0;\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n  return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  let level = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"\\\\\") {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  if (level > 0) {\n    return -2;\n  }\n  return -1;\n}\n\n// src/Tokenizer.ts\nfunction outputLink(cap, link2, raw, lexer2, rules) {\n  const href = link2.href;\n  const title = link2.title || null;\n  const text = cap[1].replace(rules.other.outputLinkReplace, \"$1\");\n  lexer2.state.inLink = true;\n  const token = {\n    type: cap[0].charAt(0) === \"!\" ? \"image\" : \"link\",\n    raw,\n    href,\n    title,\n    text,\n    tokens: lexer2.inlineTokens(text)\n  };\n  lexer2.state.inLink = false;\n  return token;\n}\nfunction indentCodeCompensation(raw, text, rules) {\n  const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n  if (matchIndentToCode === null) {\n    return text;\n  }\n  const indentToCode = matchIndentToCode[1];\n  return text.split(\"\\n\").map(node => {\n    const matchIndentInNode = node.match(rules.other.beginningSpace);\n    if (matchIndentInNode === null) {\n      return node;\n    }\n    const [indentInNode] = matchIndentInNode;\n    if (indentInNode.length >= indentToCode.length) {\n      return node.slice(indentToCode.length);\n    }\n    return node;\n  }).join(\"\\n\");\n}\nvar _Tokenizer = class _Tokenizer {\n  // set by the lexer\n  constructor(options2) {\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"rules\", void 0);\n    // set by the lexer\n    _defineProperty(this, \"lexer\", void 0);\n    this.options = options2 || _defaults;\n  }\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: \"space\",\n        raw: cap[0]\n      };\n    }\n  }\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(this.rules.other.codeRemoveIndent, \"\");\n      return {\n        type: \"code\",\n        raw: cap[0],\n        codeBlockStyle: \"indented\",\n        text: !this.options.pedantic ? rtrim(text, \"\\n\") : text\n      };\n    }\n  }\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || \"\", this.rules);\n      return {\n        type: \"code\",\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, \"$1\") : cap[2],\n        text\n      };\n    }\n  }\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n      if (this.rules.other.endingHash.test(text)) {\n        const trimmed = rtrim(text, \"#\");\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n          text = trimmed.trim();\n        }\n      }\n      return {\n        type: \"heading\",\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: \"hr\",\n        raw: rtrim(cap[0], \"\\n\")\n      };\n    }\n  }\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      let lines = rtrim(cap[0], \"\\n\").split(\"\\n\");\n      let raw = \"\";\n      let text = \"\";\n      const tokens = [];\n      while (lines.length > 0) {\n        let inBlockquote = false;\n        const currentLines = [];\n        let i;\n        for (i = 0; i < lines.length; i++) {\n          if (this.rules.other.blockquoteStart.test(lines[i])) {\n            currentLines.push(lines[i]);\n            inBlockquote = true;\n          } else if (!inBlockquote) {\n            currentLines.push(lines[i]);\n          } else {\n            break;\n          }\n        }\n        lines = lines.slice(i);\n        const currentRaw = currentLines.join(\"\\n\");\n        const currentText = currentRaw.replace(this.rules.other.blockquoteSetextReplace, \"\\n    $1\").replace(this.rules.other.blockquoteSetextReplace2, \"\");\n        raw = raw ? \"\".concat(raw, \"\\n\").concat(currentRaw) : currentRaw;\n        text = text ? \"\".concat(text, \"\\n\").concat(currentText) : currentText;\n        const top = this.lexer.state.top;\n        this.lexer.state.top = true;\n        this.lexer.blockTokens(currentText, tokens, true);\n        this.lexer.state.top = top;\n        if (lines.length === 0) {\n          break;\n        }\n        const lastToken = tokens.at(-1);\n        if ((lastToken === null || lastToken === void 0 ? void 0 : lastToken.type) === \"code\") {\n          break;\n        } else if ((lastToken === null || lastToken === void 0 ? void 0 : lastToken.type) === \"blockquote\") {\n          const oldToken = lastToken;\n          const newText = oldToken.raw + \"\\n\" + lines.join(\"\\n\");\n          const newToken = this.blockquote(newText);\n          tokens[tokens.length - 1] = newToken;\n          raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n          break;\n        } else if ((lastToken === null || lastToken === void 0 ? void 0 : lastToken.type) === \"list\") {\n          const oldToken = lastToken;\n          const newText = oldToken.raw + \"\\n\" + lines.join(\"\\n\");\n          const newToken = this.list(newText);\n          tokens[tokens.length - 1] = newToken;\n          raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n          lines = newText.substring(tokens.at(-1).raw.length).split(\"\\n\");\n          continue;\n        }\n      }\n      return {\n        type: \"blockquote\",\n        raw,\n        tokens,\n        text\n      };\n    }\n  }\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n      const list2 = {\n        type: \"list\",\n        raw: \"\",\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : \"\",\n        loose: false,\n        items: []\n      };\n      bull = isordered ? \"\\\\d{1,9}\\\\\".concat(bull.slice(-1)) : \"\\\\\".concat(bull);\n      if (this.options.pedantic) {\n        bull = isordered ? bull : \"[*+-]\";\n      }\n      const itemRegex = this.rules.other.listItemRegex(bull);\n      let endsWithBlankLine = false;\n      while (src) {\n        let endEarly = false;\n        let raw = \"\";\n        let itemContents = \"\";\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n        if (this.rules.block.hr.test(src)) {\n          break;\n        }\n        raw = cap[0];\n        src = src.substring(raw.length);\n        let line = cap[2].split(\"\\n\", 1)[0].replace(this.rules.other.listReplaceTabs, t => \" \".repeat(3 * t.length));\n        let nextLine = src.split(\"\\n\", 1)[0];\n        let blankLine = !line.trim();\n        let indent = 0;\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimStart();\n        } else if (blankLine) {\n          indent = cap[1].length + 1;\n        } else {\n          indent = cap[2].search(this.rules.other.nonSpaceChar);\n          indent = indent > 4 ? 1 : indent;\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n        if (blankLine && this.rules.other.blankLine.test(nextLine)) {\n          raw += nextLine + \"\\n\";\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n        if (!endEarly) {\n          const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n          const hrRegex = this.rules.other.hrRegex(indent);\n          const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n          const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n          const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n          while (src) {\n            const rawLine = src.split(\"\\n\", 1)[0];\n            let nextLineWithoutTabs;\n            nextLine = rawLine;\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(this.rules.other.listReplaceNesting, \"  \");\n              nextLineWithoutTabs = nextLine;\n            } else {\n              nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, \"    \");\n            }\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n            if (htmlBeginRegex.test(nextLine)) {\n              break;\n            }\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n            if (hrRegex.test(nextLine)) {\n              break;\n            }\n            if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) {\n              itemContents += \"\\n\" + nextLineWithoutTabs.slice(indent);\n            } else {\n              if (blankLine) {\n                break;\n              }\n              if (line.replace(this.rules.other.tabCharGlobal, \"    \").search(this.rules.other.nonSpaceChar) >= 4) {\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n              itemContents += \"\\n\" + nextLine;\n            }\n            if (!blankLine && !nextLine.trim()) {\n              blankLine = true;\n            }\n            raw += rawLine + \"\\n\";\n            src = src.substring(rawLine.length + 1);\n            line = nextLineWithoutTabs.slice(indent);\n          }\n        }\n        if (!list2.loose) {\n          if (endsWithBlankLine) {\n            list2.loose = true;\n          } else if (this.rules.other.doubleBlankLine.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n        let istask = null;\n        let ischecked;\n        if (this.options.gfm) {\n          istask = this.rules.other.listIsTask.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== \"[ ] \";\n            itemContents = itemContents.replace(this.rules.other.listReplaceTask, \"\");\n          }\n        }\n        list2.items.push({\n          type: \"list_item\",\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents,\n          tokens: []\n        });\n        list2.raw += raw;\n      }\n      const lastItem = list2.items.at(-1);\n      if (lastItem) {\n        lastItem.raw = lastItem.raw.trimEnd();\n        lastItem.text = lastItem.text.trimEnd();\n      } else {\n        return;\n      }\n      list2.raw = list2.raw.trimEnd();\n      for (let i = 0; i < list2.items.length; i++) {\n        this.lexer.state.top = false;\n        list2.items[i].tokens = this.lexer.blockTokens(list2.items[i].text, []);\n        if (!list2.loose) {\n          const spacers = list2.items[i].tokens.filter(t => t.type === \"space\");\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));\n          list2.loose = hasMultipleLineBreaks;\n        }\n      }\n      if (list2.loose) {\n        for (let i = 0; i < list2.items.length; i++) {\n          list2.items[i].loose = true;\n        }\n      }\n      return list2;\n    }\n  }\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: \"html\",\n        block: true,\n        raw: cap[0],\n        pre: cap[1] === \"pre\" || cap[1] === \"script\" || cap[1] === \"style\",\n        text: cap[0]\n      };\n      return token;\n    }\n  }\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag2 = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, \" \");\n      const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, \"$1\").replace(this.rules.inline.anyPunctuation, \"$1\") : \"\";\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, \"$1\") : cap[3];\n      return {\n        type: \"def\",\n        tag: tag2,\n        raw: cap[0],\n        href,\n        title\n      };\n    }\n  }\n  table(src) {\n    var _cap$;\n    const cap = this.rules.block.table.exec(src);\n    if (!cap) {\n      return;\n    }\n    if (!this.rules.other.tableDelimiter.test(cap[2])) {\n      return;\n    }\n    const headers = splitCells(cap[1]);\n    const aligns = cap[2].replace(this.rules.other.tableAlignChars, \"\").split(\"|\");\n    const rows = (_cap$ = cap[3]) !== null && _cap$ !== void 0 && _cap$.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, \"\").split(\"\\n\") : [];\n    const item = {\n      type: \"table\",\n      raw: cap[0],\n      header: [],\n      align: [],\n      rows: []\n    };\n    if (headers.length !== aligns.length) {\n      return;\n    }\n    for (const align of aligns) {\n      if (this.rules.other.tableAlignRight.test(align)) {\n        item.align.push(\"right\");\n      } else if (this.rules.other.tableAlignCenter.test(align)) {\n        item.align.push(\"center\");\n      } else if (this.rules.other.tableAlignLeft.test(align)) {\n        item.align.push(\"left\");\n      } else {\n        item.align.push(null);\n      }\n    }\n    for (let i = 0; i < headers.length; i++) {\n      item.header.push({\n        text: headers[i],\n        tokens: this.lexer.inline(headers[i]),\n        header: true,\n        align: item.align[i]\n      });\n    }\n    for (const row of rows) {\n      item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n        return {\n          text: cell,\n          tokens: this.lexer.inline(cell),\n          header: false,\n          align: item.align[i]\n        };\n      }));\n    }\n    return item;\n  }\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: \"heading\",\n        raw: cap[0],\n        depth: cap[2].charAt(0) === \"=\" ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === \"\\n\" ? cap[1].slice(0, -1) : cap[1];\n      return {\n        type: \"paragraph\",\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: \"text\",\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: \"escape\",\n        raw: cap[0],\n        text: cap[1]\n      };\n    }\n  }\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n      return {\n        type: \"html\",\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: cap[0]\n      };\n    }\n  }\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n        if (!this.rules.other.endAngleBracket.test(trimmedUrl)) {\n          return;\n        }\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), \"\\\\\");\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        const lastParenIndex = findClosingBracket(cap[2], \"()\");\n        if (lastParenIndex === -2) {\n          return;\n        }\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf(\"!\") === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = \"\";\n        }\n      }\n      let href = cap[2];\n      let title = \"\";\n      if (this.options.pedantic) {\n        const link2 = this.rules.other.pedanticHrefTitle.exec(href);\n        if (link2) {\n          href = link2[1];\n          title = link2[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : \"\";\n      }\n      href = href.trim();\n      if (this.rules.other.startAngleBracket.test(href)) {\n        if (this.options.pedantic && !this.rules.other.endAngleBracket.test(trimmedUrl)) {\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline.anyPunctuation, \"$1\") : href,\n        title: title ? title.replace(this.rules.inline.anyPunctuation, \"$1\") : title\n      }, cap[0], this.lexer, this.rules);\n    }\n  }\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n      const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, \" \");\n      const link2 = links[linkString.toLowerCase()];\n      if (!link2) {\n        const text = cap[0].charAt(0);\n        return {\n          type: \"text\",\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link2, cap[0], this.lexer, this.rules);\n    }\n  }\n  emStrong(src, maskedSrc) {\n    let prevChar = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n    let match = this.rules.inline.emStrongLDelim.exec(src);\n    if (!match) return;\n    if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric)) return;\n    const nextChar = match[1] || match[2] || \"\";\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n      const lLength = [...match[0]].length - 1;\n      let rDelim,\n        rLength,\n        delimTotal = lLength,\n        midDelimTotal = 0;\n      const endReg = match[0][0] === \"*\" ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n      endReg.lastIndex = 0;\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n        if (!rDelim) continue;\n        rLength = [...rDelim].length;\n        if (match[3] || match[4]) {\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) {\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue;\n          }\n        }\n        delimTotal -= rLength;\n        if (delimTotal > 0) continue;\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n        const lastCharLength = [...match[0]][0].length;\n        const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n        if (Math.min(lLength, rLength) % 2) {\n          const text2 = raw.slice(1, -1);\n          return {\n            type: \"em\",\n            raw,\n            text: text2,\n            tokens: this.lexer.inlineTokens(text2)\n          };\n        }\n        const text = raw.slice(2, -2);\n        return {\n          type: \"strong\",\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(this.rules.other.newLineCharGlobal, \" \");\n      const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n      const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      return {\n        type: \"codespan\",\n        raw: cap[0],\n        text\n      };\n    }\n  }\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: \"br\",\n        raw: cap[0]\n      };\n    }\n  }\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: \"del\",\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n  autolink(src) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === \"@\") {\n        text = cap[1];\n        href = \"mailto:\" + text;\n      } else {\n        text = cap[1];\n        href = text;\n      }\n      return {\n        type: \"link\",\n        raw: cap[0],\n        text,\n        href,\n        tokens: [{\n          type: \"text\",\n          raw: text,\n          text\n        }]\n      };\n    }\n  }\n  url(src) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === \"@\") {\n        text = cap[0];\n        href = \"mailto:\" + text;\n      } else {\n        let prevCapZero;\n        do {\n          var _this$rules$inline$_b, _this$rules$inline$_b2;\n          prevCapZero = cap[0];\n          cap[0] = (_this$rules$inline$_b = (_this$rules$inline$_b2 = this.rules.inline._backpedal.exec(cap[0])) === null || _this$rules$inline$_b2 === void 0 ? void 0 : _this$rules$inline$_b2[0]) !== null && _this$rules$inline$_b !== void 0 ? _this$rules$inline$_b : \"\";\n        } while (prevCapZero !== cap[0]);\n        text = cap[0];\n        if (cap[1] === \"www.\") {\n          href = \"http://\" + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: \"link\",\n        raw: cap[0],\n        text,\n        href,\n        tokens: [{\n          type: \"text\",\n          raw: text,\n          text\n        }]\n      };\n    }\n  }\n  inlineText(src) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      const escaped = this.lexer.state.inRawBlock;\n      return {\n        type: \"text\",\n        raw: cap[0],\n        text: cap[0],\n        escaped\n      };\n    }\n  }\n};\n\n// src/Lexer.ts\nvar _Lexer = class __Lexer {\n  constructor(options2) {\n    _defineProperty(this, \"tokens\", void 0);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"state\", void 0);\n    _defineProperty(this, \"tokenizer\", void 0);\n    _defineProperty(this, \"inlineQueue\", void 0);\n    this.tokens = [];\n    this.tokens.links = /* @__PURE__ */Object.create(null);\n    this.options = options2 || _defaults;\n    this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n    const rules = {\n      other,\n      block: block.normal,\n      inline: inline.normal\n    };\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options2) {\n    const lexer2 = new __Lexer(options2);\n    return lexer2.lex(src);\n  }\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options2) {\n    const lexer2 = new __Lexer(options2);\n    return lexer2.inlineTokens(src);\n  }\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src.replace(other.carriageReturn, \"\\n\");\n    this.blockTokens(src, this.tokens);\n    for (let i = 0; i < this.inlineQueue.length; i++) {\n      const next = this.inlineQueue[i];\n      this.inlineTokens(next.src, next.tokens);\n    }\n    this.inlineQueue = [];\n    return this.tokens;\n  }\n  blockTokens(src) {\n    let tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let lastParagraphClipped = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (this.options.pedantic) {\n      src = src.replace(other.tabCharGlobal, \"    \").replace(other.spaceLine, \"\");\n    }\n    while (src) {\n      var _this$options$extensi, _this$options$extensi2;\n      let token;\n      if ((_this$options$extensi = this.options.extensions) !== null && _this$options$extensi !== void 0 && (_this$options$extensi = _this$options$extensi.block) !== null && _this$options$extensi !== void 0 && _this$options$extensi.some(extTokenizer => {\n        if (token = extTokenizer.call({\n          lexer: this\n        }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.raw.length === 1 && lastToken !== void 0) {\n          lastToken.raw += \"\\n\";\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if ((lastToken === null || lastToken === void 0 ? void 0 : lastToken.type) === \"paragraph\" || (lastToken === null || lastToken === void 0 ? void 0 : lastToken.type) === \"text\") {\n          lastToken.raw += \"\\n\" + token.raw;\n          lastToken.text += \"\\n\" + token.text;\n          this.inlineQueue.at(-1).src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if ((lastToken === null || lastToken === void 0 ? void 0 : lastToken.type) === \"paragraph\" || (lastToken === null || lastToken === void 0 ? void 0 : lastToken.type) === \"text\") {\n          lastToken.raw += \"\\n\" + token.raw;\n          lastToken.text += \"\\n\" + token.raw;\n          this.inlineQueue.at(-1).src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      let cutSrc = src;\n      if ((_this$options$extensi2 = this.options.extensions) !== null && _this$options$extensi2 !== void 0 && _this$options$extensi2.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(getStartIndex => {\n          tempStart = getStartIndex.call({\n            lexer: this\n          }, tempSrc);\n          if (typeof tempStart === \"number\" && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        const lastToken = tokens.at(-1);\n        if (lastParagraphClipped && (lastToken === null || lastToken === void 0 ? void 0 : lastToken.type) === \"paragraph\") {\n          lastToken.raw += \"\\n\" + token.raw;\n          lastToken.text += \"\\n\" + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1).src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = cutSrc.length !== src.length;\n        src = src.substring(token.raw.length);\n        continue;\n      }\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if ((lastToken === null || lastToken === void 0 ? void 0 : lastToken.type) === \"text\") {\n          lastToken.raw += \"\\n\" + token.raw;\n          lastToken.text += \"\\n\" + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1).src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (src) {\n        const errMsg = \"Infinite loop on byte: \" + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n    this.state.top = true;\n    return tokens;\n  }\n  inline(src) {\n    let tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    this.inlineQueue.push({\n      src,\n      tokens\n    });\n    return tokens;\n  }\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src) {\n    let tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let maskedSrc = src;\n    let match = null;\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf(\"[\") + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + \"[\" + \"a\".repeat(match[0].length - 2) + \"]\" + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + \"++\" + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    }\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + \"[\" + \"a\".repeat(match[0].length - 2) + \"]\" + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n    let keepPrevChar = false;\n    let prevChar = \"\";\n    while (src) {\n      var _this$options$extensi3, _this$options$extensi4;\n      if (!keepPrevChar) {\n        prevChar = \"\";\n      }\n      keepPrevChar = false;\n      let token;\n      if ((_this$options$extensi3 = this.options.extensions) !== null && _this$options$extensi3 !== void 0 && (_this$options$extensi3 = _this$options$extensi3.inline) !== null && _this$options$extensi3 !== void 0 && _this$options$extensi3.some(extTokenizer => {\n        if (token = extTokenizer.call({\n          lexer: this\n        }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.type === \"text\" && (lastToken === null || lastToken === void 0 ? void 0 : lastToken.type) === \"text\") {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.autolink(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      let cutSrc = src;\n      if ((_this$options$extensi4 = this.options.extensions) !== null && _this$options$extensi4 !== void 0 && _this$options$extensi4.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(getStartIndex => {\n          tempStart = getStartIndex.call({\n            lexer: this\n          }, tempSrc);\n          if (typeof tempStart === \"number\" && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== \"_\") {\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        const lastToken = tokens.at(-1);\n        if ((lastToken === null || lastToken === void 0 ? void 0 : lastToken.type) === \"text\") {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (src) {\n        const errMsg = \"Infinite loop on byte: \" + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n    return tokens;\n  }\n};\n\n// src/Renderer.ts\nvar _Renderer = class _Renderer {\n  // set by the parser\n  constructor(options2) {\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"parser\", void 0);\n    this.options = options2 || _defaults;\n  }\n  space(token) {\n    return \"\";\n  }\n  code(_ref) {\n    var _match;\n    let {\n      text,\n      lang,\n      escaped\n    } = _ref;\n    const langString = (_match = (lang || \"\").match(other.notSpaceStart)) === null || _match === void 0 ? void 0 : _match[0];\n    const code = text.replace(other.endingNewline, \"\") + \"\\n\";\n    if (!langString) {\n      return \"<pre><code>\" + (escaped ? code : escape2(code, true)) + \"</code></pre>\\n\";\n    }\n    return '<pre><code class=\"language-' + escape2(langString) + '\">' + (escaped ? code : escape2(code, true)) + \"</code></pre>\\n\";\n  }\n  blockquote(_ref2) {\n    let {\n      tokens\n    } = _ref2;\n    const body = this.parser.parse(tokens);\n    return \"<blockquote>\\n\".concat(body, \"</blockquote>\\n\");\n  }\n  html(_ref3) {\n    let {\n      text\n    } = _ref3;\n    return text;\n  }\n  heading(_ref4) {\n    let {\n      tokens,\n      depth\n    } = _ref4;\n    return \"<h\".concat(depth, \">\").concat(this.parser.parseInline(tokens), \"</h\").concat(depth, \">\\n\");\n  }\n  hr(token) {\n    return \"<hr>\\n\";\n  }\n  list(token) {\n    const ordered = token.ordered;\n    const start = token.start;\n    let body = \"\";\n    for (let j = 0; j < token.items.length; j++) {\n      const item = token.items[j];\n      body += this.listitem(item);\n    }\n    const type = ordered ? \"ol\" : \"ul\";\n    const startAttr = ordered && start !== 1 ? ' start=\"' + start + '\"' : \"\";\n    return \"<\" + type + startAttr + \">\\n\" + body + \"</\" + type + \">\\n\";\n  }\n  listitem(item) {\n    let itemBody = \"\";\n    if (item.task) {\n      const checkbox = this.checkbox({\n        checked: !!item.checked\n      });\n      if (item.loose) {\n        var _item$tokens$;\n        if (((_item$tokens$ = item.tokens[0]) === null || _item$tokens$ === void 0 ? void 0 : _item$tokens$.type) === \"paragraph\") {\n          item.tokens[0].text = checkbox + \" \" + item.tokens[0].text;\n          if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === \"text\") {\n            item.tokens[0].tokens[0].text = checkbox + \" \" + escape2(item.tokens[0].tokens[0].text);\n            item.tokens[0].tokens[0].escaped = true;\n          }\n        } else {\n          item.tokens.unshift({\n            type: \"text\",\n            raw: checkbox + \" \",\n            text: checkbox + \" \",\n            escaped: true\n          });\n        }\n      } else {\n        itemBody += checkbox + \" \";\n      }\n    }\n    itemBody += this.parser.parse(item.tokens, !!item.loose);\n    return \"<li>\".concat(itemBody, \"</li>\\n\");\n  }\n  checkbox(_ref5) {\n    let {\n      checked\n    } = _ref5;\n    return \"<input \" + (checked ? 'checked=\"\" ' : \"\") + 'disabled=\"\" type=\"checkbox\">';\n  }\n  paragraph(_ref6) {\n    let {\n      tokens\n    } = _ref6;\n    return \"<p>\".concat(this.parser.parseInline(tokens), \"</p>\\n\");\n  }\n  table(token) {\n    let header = \"\";\n    let cell = \"\";\n    for (let j = 0; j < token.header.length; j++) {\n      cell += this.tablecell(token.header[j]);\n    }\n    header += this.tablerow({\n      text: cell\n    });\n    let body = \"\";\n    for (let j = 0; j < token.rows.length; j++) {\n      const row = token.rows[j];\n      cell = \"\";\n      for (let k = 0; k < row.length; k++) {\n        cell += this.tablecell(row[k]);\n      }\n      body += this.tablerow({\n        text: cell\n      });\n    }\n    if (body) body = \"<tbody>\".concat(body, \"</tbody>\");\n    return \"<table>\\n<thead>\\n\" + header + \"</thead>\\n\" + body + \"</table>\\n\";\n  }\n  tablerow(_ref7) {\n    let {\n      text\n    } = _ref7;\n    return \"<tr>\\n\".concat(text, \"</tr>\\n\");\n  }\n  tablecell(token) {\n    const content = this.parser.parseInline(token.tokens);\n    const type = token.header ? \"th\" : \"td\";\n    const tag2 = token.align ? \"<\".concat(type, \" align=\\\"\").concat(token.align, \"\\\">\") : \"<\".concat(type, \">\");\n    return tag2 + content + \"</\".concat(type, \">\\n\");\n  }\n  /**\n   * span level renderer\n   */\n  strong(_ref8) {\n    let {\n      tokens\n    } = _ref8;\n    return \"<strong>\".concat(this.parser.parseInline(tokens), \"</strong>\");\n  }\n  em(_ref9) {\n    let {\n      tokens\n    } = _ref9;\n    return \"<em>\".concat(this.parser.parseInline(tokens), \"</em>\");\n  }\n  codespan(_ref0) {\n    let {\n      text\n    } = _ref0;\n    return \"<code>\".concat(escape2(text, true), \"</code>\");\n  }\n  br(token) {\n    return \"<br>\";\n  }\n  del(_ref1) {\n    let {\n      tokens\n    } = _ref1;\n    return \"<del>\".concat(this.parser.parseInline(tokens), \"</del>\");\n  }\n  link(_ref10) {\n    let {\n      href,\n      title,\n      tokens\n    } = _ref10;\n    const text = this.parser.parseInline(tokens);\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return text;\n    }\n    href = cleanHref;\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + escape2(title) + '\"';\n    }\n    out += \">\" + text + \"</a>\";\n    return out;\n  }\n  image(_ref11) {\n    let {\n      href,\n      title,\n      text,\n      tokens\n    } = _ref11;\n    if (tokens) {\n      text = this.parser.parseInline(tokens, this.parser.textRenderer);\n    }\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return escape2(text);\n    }\n    href = cleanHref;\n    let out = \"<img src=\\\"\".concat(href, \"\\\" alt=\\\"\").concat(text, \"\\\"\");\n    if (title) {\n      out += \" title=\\\"\".concat(escape2(title), \"\\\"\");\n    }\n    out += \">\";\n    return out;\n  }\n  text(token) {\n    return \"tokens\" in token && token.tokens ? this.parser.parseInline(token.tokens) : \"escaped\" in token && token.escaped ? token.text : escape2(token.text);\n  }\n};\n\n// src/TextRenderer.ts\nvar _TextRenderer = class {\n  // no need for block level renderers\n  strong(_ref12) {\n    let {\n      text\n    } = _ref12;\n    return text;\n  }\n  em(_ref13) {\n    let {\n      text\n    } = _ref13;\n    return text;\n  }\n  codespan(_ref14) {\n    let {\n      text\n    } = _ref14;\n    return text;\n  }\n  del(_ref15) {\n    let {\n      text\n    } = _ref15;\n    return text;\n  }\n  html(_ref16) {\n    let {\n      text\n    } = _ref16;\n    return text;\n  }\n  text(_ref17) {\n    let {\n      text\n    } = _ref17;\n    return text;\n  }\n  link(_ref18) {\n    let {\n      text\n    } = _ref18;\n    return \"\" + text;\n  }\n  image(_ref19) {\n    let {\n      text\n    } = _ref19;\n    return \"\" + text;\n  }\n  br() {\n    return \"\";\n  }\n};\n\n// src/Parser.ts\nvar _Parser = class __Parser {\n  constructor(options2) {\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"renderer\", void 0);\n    _defineProperty(this, \"textRenderer\", void 0);\n    this.options = options2 || _defaults;\n    this.options.renderer = this.options.renderer || new _Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.renderer.parser = this;\n    this.textRenderer = new _TextRenderer();\n  }\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options2) {\n    const parser2 = new __Parser(options2);\n    return parser2.parse(tokens);\n  }\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options2) {\n    const parser2 = new __Parser(options2);\n    return parser2.parseInline(tokens);\n  }\n  /**\n   * Parse Loop\n   */\n  parse(tokens) {\n    let top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let out = \"\";\n    for (let i = 0; i < tokens.length; i++) {\n      var _this$options$extensi5;\n      const anyToken = tokens[i];\n      if ((_this$options$extensi5 = this.options.extensions) !== null && _this$options$extensi5 !== void 0 && (_this$options$extensi5 = _this$options$extensi5.renderers) !== null && _this$options$extensi5 !== void 0 && _this$options$extensi5[anyToken.type]) {\n        const genericToken = anyToken;\n        const ret = this.options.extensions.renderers[genericToken.type].call({\n          parser: this\n        }, genericToken);\n        if (ret !== false || ![\"space\", \"hr\", \"heading\", \"code\", \"table\", \"blockquote\", \"list\", \"html\", \"paragraph\", \"text\"].includes(genericToken.type)) {\n          out += ret || \"\";\n          continue;\n        }\n      }\n      const token = anyToken;\n      switch (token.type) {\n        case \"space\":\n          {\n            out += this.renderer.space(token);\n            continue;\n          }\n        case \"hr\":\n          {\n            out += this.renderer.hr(token);\n            continue;\n          }\n        case \"heading\":\n          {\n            out += this.renderer.heading(token);\n            continue;\n          }\n        case \"code\":\n          {\n            out += this.renderer.code(token);\n            continue;\n          }\n        case \"table\":\n          {\n            out += this.renderer.table(token);\n            continue;\n          }\n        case \"blockquote\":\n          {\n            out += this.renderer.blockquote(token);\n            continue;\n          }\n        case \"list\":\n          {\n            out += this.renderer.list(token);\n            continue;\n          }\n        case \"html\":\n          {\n            out += this.renderer.html(token);\n            continue;\n          }\n        case \"paragraph\":\n          {\n            out += this.renderer.paragraph(token);\n            continue;\n          }\n        case \"text\":\n          {\n            let textToken = token;\n            let body = this.renderer.text(textToken);\n            while (i + 1 < tokens.length && tokens[i + 1].type === \"text\") {\n              textToken = tokens[++i];\n              body += \"\\n\" + this.renderer.text(textToken);\n            }\n            if (top) {\n              out += this.renderer.paragraph({\n                type: \"paragraph\",\n                raw: body,\n                text: body,\n                tokens: [{\n                  type: \"text\",\n                  raw: body,\n                  text: body,\n                  escaped: true\n                }]\n              });\n            } else {\n              out += body;\n            }\n            continue;\n          }\n        default:\n          {\n            const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n            if (this.options.silent) {\n              console.error(errMsg);\n              return \"\";\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n      }\n    }\n    return out;\n  }\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens) {\n    let renderer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.renderer;\n    let out = \"\";\n    for (let i = 0; i < tokens.length; i++) {\n      var _this$options$extensi6;\n      const anyToken = tokens[i];\n      if ((_this$options$extensi6 = this.options.extensions) !== null && _this$options$extensi6 !== void 0 && (_this$options$extensi6 = _this$options$extensi6.renderers) !== null && _this$options$extensi6 !== void 0 && _this$options$extensi6[anyToken.type]) {\n        const ret = this.options.extensions.renderers[anyToken.type].call({\n          parser: this\n        }, anyToken);\n        if (ret !== false || ![\"escape\", \"html\", \"link\", \"image\", \"strong\", \"em\", \"codespan\", \"br\", \"del\", \"text\"].includes(anyToken.type)) {\n          out += ret || \"\";\n          continue;\n        }\n      }\n      const token = anyToken;\n      switch (token.type) {\n        case \"escape\":\n          {\n            out += renderer.text(token);\n            break;\n          }\n        case \"html\":\n          {\n            out += renderer.html(token);\n            break;\n          }\n        case \"link\":\n          {\n            out += renderer.link(token);\n            break;\n          }\n        case \"image\":\n          {\n            out += renderer.image(token);\n            break;\n          }\n        case \"strong\":\n          {\n            out += renderer.strong(token);\n            break;\n          }\n        case \"em\":\n          {\n            out += renderer.em(token);\n            break;\n          }\n        case \"codespan\":\n          {\n            out += renderer.codespan(token);\n            break;\n          }\n        case \"br\":\n          {\n            out += renderer.br(token);\n            break;\n          }\n        case \"del\":\n          {\n            out += renderer.del(token);\n            break;\n          }\n        case \"text\":\n          {\n            out += renderer.text(token);\n            break;\n          }\n        default:\n          {\n            const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n            if (this.options.silent) {\n              console.error(errMsg);\n              return \"\";\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n      }\n    }\n    return out;\n  }\n};\n\n// src/Hooks.ts\nvar _Hooks = (_Class3 = class _Hooks {\n  constructor(options2) {\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"block\", void 0);\n    this.options = options2 || _defaults;\n  }\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown) {\n    return markdown;\n  }\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html2) {\n    return html2;\n  }\n  /**\n   * Process all tokens before walk tokens\n   */\n  processAllTokens(tokens) {\n    return tokens;\n  }\n  /**\n   * Provide function to tokenize markdown\n   */\n  provideLexer() {\n    return this.block ? _Lexer.lex : _Lexer.lexInline;\n  }\n  /**\n   * Provide function to parse tokens\n   */\n  provideParser() {\n    return this.block ? _Parser.parse : _Parser.parseInline;\n  }\n}, _defineProperty(_Class3, \"passThroughHooks\", /* @__PURE__ */new Set([\"preprocess\", \"postprocess\", \"processAllTokens\"])), _Class3);\n\n// src/Instance.ts\nvar Marked = class Marked {\n  constructor() {\n    _defineProperty(this, \"defaults\", _getDefaults());\n    _defineProperty(this, \"options\", this.setOptions);\n    _defineProperty(this, \"parse\", this.parseMarkdown(true));\n    _defineProperty(this, \"parseInline\", this.parseMarkdown(false));\n    _defineProperty(this, \"Parser\", _Parser);\n    _defineProperty(this, \"Renderer\", _Renderer);\n    _defineProperty(this, \"TextRenderer\", _TextRenderer);\n    _defineProperty(this, \"Lexer\", _Lexer);\n    _defineProperty(this, \"Tokenizer\", _Tokenizer);\n    _defineProperty(this, \"Hooks\", _Hooks);\n    this.use(...arguments);\n  }\n  /**\n   * Run callback for every token\n   */\n  walkTokens(tokens, callback) {\n    let values = [];\n    for (const token of tokens) {\n      values = values.concat(callback.call(this, token));\n      switch (token.type) {\n        case \"table\":\n          {\n            const tableToken = token;\n            for (const cell of tableToken.header) {\n              values = values.concat(this.walkTokens(cell.tokens, callback));\n            }\n            for (const row of tableToken.rows) {\n              for (const cell of row) {\n                values = values.concat(this.walkTokens(cell.tokens, callback));\n              }\n            }\n            break;\n          }\n        case \"list\":\n          {\n            const listToken = token;\n            values = values.concat(this.walkTokens(listToken.items, callback));\n            break;\n          }\n        default:\n          {\n            var _this$defaults$extens;\n            const genericToken = token;\n            if ((_this$defaults$extens = this.defaults.extensions) !== null && _this$defaults$extens !== void 0 && (_this$defaults$extens = _this$defaults$extens.childTokens) !== null && _this$defaults$extens !== void 0 && _this$defaults$extens[genericToken.type]) {\n              this.defaults.extensions.childTokens[genericToken.type].forEach(childTokens => {\n                const tokens2 = genericToken[childTokens].flat(Infinity);\n                values = values.concat(this.walkTokens(tokens2, callback));\n              });\n            } else if (genericToken.tokens) {\n              values = values.concat(this.walkTokens(genericToken.tokens, callback));\n            }\n          }\n      }\n    }\n    return values;\n  }\n  use() {\n    const extensions = this.defaults.extensions || {\n      renderers: {},\n      childTokens: {}\n    };\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    args.forEach(pack => {\n      const opts = _objectSpread({}, pack);\n      opts.async = this.defaults.async || opts.async || false;\n      if (pack.extensions) {\n        pack.extensions.forEach(ext => {\n          if (!ext.name) {\n            throw new Error(\"extension name required\");\n          }\n          if (\"renderer\" in ext) {\n            const prevRenderer = extensions.renderers[ext.name];\n            if (prevRenderer) {\n              extensions.renderers[ext.name] = function () {\n                for (var _len2 = arguments.length, args2 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                  args2[_key2] = arguments[_key2];\n                }\n                let ret = ext.renderer.apply(this, args2);\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args2);\n                }\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n          if (\"tokenizer\" in ext) {\n            if (!ext.level || ext.level !== \"block\" && ext.level !== \"inline\") {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n            const extLevel = extensions[ext.level];\n            if (extLevel) {\n              extLevel.unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n            if (ext.start) {\n              if (ext.level === \"block\") {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start);\n                } else {\n                  extensions.startBlock = [ext.start];\n                }\n              } else if (ext.level === \"inline\") {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start);\n                } else {\n                  extensions.startInline = [ext.start];\n                }\n              }\n            }\n          }\n          if (\"childTokens\" in ext && ext.childTokens) {\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n        opts.extensions = extensions;\n      }\n      if (pack.renderer) {\n        const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n        for (const prop in pack.renderer) {\n          if (!(prop in renderer)) {\n            throw new Error(\"renderer '\".concat(prop, \"' does not exist\"));\n          }\n          if ([\"options\", \"parser\"].includes(prop)) {\n            continue;\n          }\n          const rendererProp = prop;\n          const rendererFunc = pack.renderer[rendererProp];\n          const prevRenderer = renderer[rendererProp];\n          renderer[rendererProp] = function () {\n            for (var _len3 = arguments.length, args2 = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n              args2[_key3] = arguments[_key3];\n            }\n            let ret = rendererFunc.apply(renderer, args2);\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args2);\n            }\n            return ret || \"\";\n          };\n        }\n        opts.renderer = renderer;\n      }\n      if (pack.tokenizer) {\n        const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n        for (const prop in pack.tokenizer) {\n          if (!(prop in tokenizer)) {\n            throw new Error(\"tokenizer '\".concat(prop, \"' does not exist\"));\n          }\n          if ([\"options\", \"rules\", \"lexer\"].includes(prop)) {\n            continue;\n          }\n          const tokenizerProp = prop;\n          const tokenizerFunc = pack.tokenizer[tokenizerProp];\n          const prevTokenizer = tokenizer[tokenizerProp];\n          tokenizer[tokenizerProp] = function () {\n            for (var _len4 = arguments.length, args2 = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n              args2[_key4] = arguments[_key4];\n            }\n            let ret = tokenizerFunc.apply(tokenizer, args2);\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args2);\n            }\n            return ret;\n          };\n        }\n        opts.tokenizer = tokenizer;\n      }\n      if (pack.hooks) {\n        const hooks = this.defaults.hooks || new _Hooks();\n        for (const prop in pack.hooks) {\n          if (!(prop in hooks)) {\n            throw new Error(\"hook '\".concat(prop, \"' does not exist\"));\n          }\n          if ([\"options\", \"block\"].includes(prop)) {\n            continue;\n          }\n          const hooksProp = prop;\n          const hooksFunc = pack.hooks[hooksProp];\n          const prevHook = hooks[hooksProp];\n          if (_Hooks.passThroughHooks.has(prop)) {\n            hooks[hooksProp] = arg => {\n              if (this.defaults.async) {\n                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret2 => {\n                  return prevHook.call(hooks, ret2);\n                });\n              }\n              const ret = hooksFunc.call(hooks, arg);\n              return prevHook.call(hooks, ret);\n            };\n          } else {\n            hooks[hooksProp] = function () {\n              for (var _len5 = arguments.length, args2 = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n                args2[_key5] = arguments[_key5];\n              }\n              let ret = hooksFunc.apply(hooks, args2);\n              if (ret === false) {\n                ret = prevHook.apply(hooks, args2);\n              }\n              return ret;\n            };\n          }\n        }\n        opts.hooks = hooks;\n      }\n      if (pack.walkTokens) {\n        const walkTokens2 = this.defaults.walkTokens;\n        const packWalktokens = pack.walkTokens;\n        opts.walkTokens = function (token) {\n          let values = [];\n          values.push(packWalktokens.call(this, token));\n          if (walkTokens2) {\n            values = values.concat(walkTokens2.call(this, token));\n          }\n          return values;\n        };\n      }\n      this.defaults = _objectSpread(_objectSpread({}, this.defaults), opts);\n    });\n    return this;\n  }\n  setOptions(opt) {\n    this.defaults = _objectSpread(_objectSpread({}, this.defaults), opt);\n    return this;\n  }\n  lexer(src, options2) {\n    return _Lexer.lex(src, options2 !== null && options2 !== void 0 ? options2 : this.defaults);\n  }\n  parser(tokens, options2) {\n    return _Parser.parse(tokens, options2 !== null && options2 !== void 0 ? options2 : this.defaults);\n  }\n  parseMarkdown(blockType) {\n    const parse2 = (src, options2) => {\n      const origOpt = _objectSpread({}, options2);\n      const opt = _objectSpread(_objectSpread({}, this.defaults), origOpt);\n      const throwError = this.onError(!!opt.silent, !!opt.async);\n      if (this.defaults.async === true && origOpt.async === false) {\n        return throwError(new Error(\"marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.\"));\n      }\n      if (typeof src === \"undefined\" || src === null) {\n        return throwError(new Error(\"marked(): input parameter is undefined or null\"));\n      }\n      if (typeof src !== \"string\") {\n        return throwError(new Error(\"marked(): input parameter is of type \" + Object.prototype.toString.call(src) + \", string expected\"));\n      }\n      if (opt.hooks) {\n        opt.hooks.options = opt;\n        opt.hooks.block = blockType;\n      }\n      const lexer2 = opt.hooks ? opt.hooks.provideLexer() : blockType ? _Lexer.lex : _Lexer.lexInline;\n      const parser2 = opt.hooks ? opt.hooks.provideParser() : blockType ? _Parser.parse : _Parser.parseInline;\n      if (opt.async) {\n        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then(src2 => lexer2(src2, opt)).then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens).then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens).then(tokens => parser2(tokens, opt)).then(html2 => opt.hooks ? opt.hooks.postprocess(html2) : html2).catch(throwError);\n      }\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src);\n        }\n        let tokens = lexer2(src, opt);\n        if (opt.hooks) {\n          tokens = opt.hooks.processAllTokens(tokens);\n        }\n        if (opt.walkTokens) {\n          this.walkTokens(tokens, opt.walkTokens);\n        }\n        let html2 = parser2(tokens, opt);\n        if (opt.hooks) {\n          html2 = opt.hooks.postprocess(html2);\n        }\n        return html2;\n      } catch (e) {\n        return throwError(e);\n      }\n    };\n    return parse2;\n  }\n  onError(silent, async) {\n    return e => {\n      e.message += \"\\nPlease report this to https://github.com/markedjs/marked.\";\n      if (silent) {\n        const msg = \"<p>An error occurred:</p><pre>\" + escape2(e.message + \"\", true) + \"</pre>\";\n        if (async) {\n          return Promise.resolve(msg);\n        }\n        return msg;\n      }\n      if (async) {\n        return Promise.reject(e);\n      }\n      throw e;\n    };\n  }\n};\n\n// src/marked.ts\nvar markedInstance = new Marked();\nfunction marked(src, opt) {\n  return markedInstance.parse(src, opt);\n}\nmarked.options = marked.setOptions = function (options2) {\n  markedInstance.setOptions(options2);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\nmarked.use = function () {\n  markedInstance.use(...arguments);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\nmarked.walkTokens = function (tokens, callback) {\n  return markedInstance.walkTokens(tokens, callback);\n};\nmarked.parseInline = markedInstance.parseInline;\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nvar options = marked.options;\nvar setOptions = marked.setOptions;\nvar use = marked.use;\nvar walkTokens = marked.walkTokens;\nvar parseInline = marked.parseInline;\nvar parse = marked;\nvar parser = _Parser.parse;\nvar lexer = _Lexer.lex;\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };","map":{"version":3,"names":["_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","_defaults","changeDefaults","newDefaults","noopTest","exec","edit","regex","opt","arguments","length","undefined","source","obj","replace","name","val","valSource","other","caret","getRegex","RegExp","codeRemoveIndent","outputLinkReplace","indentCodeCompensation","beginningSpace","endingHash","startingSpaceChar","endingSpaceChar","nonSpaceChar","newLineCharGlobal","tabCharGlobal","multipleSpaceGlobal","blankLine","doubleBlankLine","blockquoteStart","blockquoteSetextReplace","blockquoteSetextReplace2","listReplaceTabs","listReplaceNesting","listIsTask","listReplaceTask","anyLine","hrefBrackets","tableDelimiter","tableAlignChars","tableRowBlankLine","tableAlignRight","tableAlignCenter","tableAlignLeft","startATag","endATag","startPreScriptTag","endPreScriptTag","startAngleBracket","endAngleBracket","pedanticHrefTitle","unicodeAlphaNumeric","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","unescapeTest","percentDecode","findPipe","splitPipe","slashPipe","carriageReturn","spaceLine","notSpaceStart","endingNewline","listItemRegex","bull","concat","nextBulletRegex","indent","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","htmlBeginRegex","newline","blockCode","fences","hr","heading","bullet","lheadingCore","lheading","lheadingGfm","_paragraph","blockText","_blockLabel","def","list","_tag","_comment","html","paragraph","blockquote","blockNormal","code","table","text","gfmTable","blockGfm","_objectSpread","blockPedantic","escape","inlineCode","br","inlineText","_punctuation","_punctuationOrSpace","_notPunctuationOrSpace","punctuation","_punctuationGfmStrongEm","_punctuationOrSpaceGfmStrongEm","_notPunctuationOrSpaceGfmStrongEm","blockSkip","emStrongLDelimCore","emStrongLDelim","emStrongLDelimGfm","emStrongRDelimAstCore","emStrongRDelimAst","emStrongRDelimAstGfm","emStrongRDelimUnd","anyPunctuation","autolink","_inlineComment","tag","_inlineLabel","link","reflink","nolink","reflinkSearch","inlineNormal","_backpedal","del","url","inlinePedantic","inlineGfm","inlineBreaks","block","normal","inline","escapeReplacements","getEscapeReplacement","ch","escape2","html2","encode","test","cleanUrl","href","encodeURI","_unused","splitCells","tableRow","count","_cells$at","row","match","offset","str","escaped","curr","cells","split","i","trim","shift","at","pop","splice","push","rtrim","c","invert","l","suffLen","currChar","charAt","slice","findClosingBracket","b","indexOf","level","outputLink","cap","link2","raw","lexer2","rules","title","state","inLink","token","type","tokens","inlineTokens","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","_Tokenizer","constructor","options2","_defineProperty","options","space","src","codeBlockStyle","lang","trimmed","depth","lexer","lines","inBlockquote","currentLines","currentRaw","currentText","top","blockTokens","lastToken","oldToken","newText","newToken","substring","isordered","list2","ordered","start","loose","items","itemRegex","endsWithBlankLine","endEarly","itemContents","line","t","repeat","nextLine","trimStart","search","rawLine","nextLineWithoutTabs","istask","ischecked","task","checked","lastItem","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","tag2","toLowerCase","_cap$","headers","aligns","rows","item","header","align","cell","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","links","linkString","emStrong","maskedSrc","prevChar","nextChar","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","lastIndex","lastCharLength","index","text2","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","prevCapZero","_this$rules$inline$_b","_this$rules$inline$_b2","_Lexer","__Lexer","Object","create","inlineQueue","lex","lexInline","next","lastParagraphClipped","_this$options$extensi","_this$options$extensi2","extTokenizer","call","cutSrc","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keys","includes","lastIndexOf","keepPrevChar","_this$options$extensi3","_this$options$extensi4","startInline","_Renderer","_ref","_match","langString","_ref2","body","parser","parse","_ref3","_ref4","parseInline","j","listitem","startAttr","itemBody","checkbox","_item$tokens$","unshift","_ref5","_ref6","tablecell","tablerow","k","_ref7","content","strong","_ref8","em","_ref9","_ref0","_ref1","_ref10","cleanHref","out","image","_ref11","textRenderer","_TextRenderer","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","_Parser","__Parser","parser2","_this$options$extensi5","anyToken","renderers","genericToken","ret","textToken","_this$options$extensi6","_Hooks","_Class3","preprocess","markdown","postprocess","processAllTokens","provideLexer","provideParser","Set","Marked","setOptions","parseMarkdown","use","callback","values","tableToken","listToken","_this$defaults$extens","defaults","childTokens","tokens2","flat","_len","args","Array","_key","pack","opts","ext","prevRenderer","_len2","args2","_key2","apply","extLevel","prop","rendererProp","rendererFunc","_len3","_key3","tokenizerProp","tokenizerFunc","prevTokenizer","_len4","_key4","hooksProp","hooksFunc","prevHook","passThroughHooks","has","arg","Promise","resolve","then","ret2","_len5","_key5","walkTokens2","packWalktokens","blockType","parse2","origOpt","throwError","onError","prototype","toString","src2","all","catch","e","message","msg","reject","markedInstance","marked","getDefaults","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks"],"sources":["/Users/reimundovalentin/Downloads/ai-tutor-project/node_modules/marked/src/defaults.ts","/Users/reimundovalentin/Downloads/ai-tutor-project/node_modules/marked/src/rules.ts","/Users/reimundovalentin/Downloads/ai-tutor-project/node_modules/marked/src/helpers.ts","/Users/reimundovalentin/Downloads/ai-tutor-project/node_modules/marked/src/Tokenizer.ts","/Users/reimundovalentin/Downloads/ai-tutor-project/node_modules/marked/src/Lexer.ts","/Users/reimundovalentin/Downloads/ai-tutor-project/node_modules/marked/src/Renderer.ts","/Users/reimundovalentin/Downloads/ai-tutor-project/node_modules/marked/src/TextRenderer.ts","/Users/reimundovalentin/Downloads/ai-tutor-project/node_modules/marked/src/Parser.ts","/Users/reimundovalentin/Downloads/ai-tutor-project/node_modules/marked/src/Hooks.ts","/Users/reimundovalentin/Downloads/ai-tutor-project/node_modules/marked/src/Instance.ts","/Users/reimundovalentin/Downloads/ai-tutor-project/node_modules/marked/src/marked.ts"],"sourcesContent":["import type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Gets the original marked default options.\n */\nexport function _getDefaults(): MarkedOptions {\n  return {\n    async: false,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    hooks: null,\n    pedantic: false,\n    renderer: null,\n    silent: false,\n    tokenizer: null,\n    walkTokens: null,\n  };\n}\n\nexport let _defaults = _getDefaults();\n\nexport function changeDefaults(newDefaults: MarkedOptions) {\n  _defaults = newDefaults;\n}\n","const noopTest = { exec: () => null } as unknown as RegExp;\n\nfunction edit(regex: string | RegExp, opt = '') {\n  let source = typeof regex === 'string' ? regex : regex.source;\n  const obj = {\n    replace: (name: string | RegExp, val: string | RegExp) => {\n      let valSource = typeof val === 'string' ? val : val.source;\n      valSource = valSource.replace(other.caret, '$1');\n      source = source.replace(name, valSource);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(source, opt);\n    },\n  };\n  return obj;\n}\n\nexport const other = {\n  codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n  outputLinkReplace: /\\\\([\\[\\]])/g,\n  indentCodeCompensation: /^(\\s+)(?:```)/,\n  beginningSpace: /^\\s+/,\n  endingHash: /#$/,\n  startingSpaceChar: /^ /,\n  endingSpaceChar: / $/,\n  nonSpaceChar: /[^ ]/,\n  newLineCharGlobal: /\\n/g,\n  tabCharGlobal: /\\t/g,\n  multipleSpaceGlobal: /\\s+/g,\n  blankLine: /^[ \\t]*$/,\n  doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n  blockquoteStart: /^ {0,3}>/,\n  blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n  blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n  listReplaceTabs: /^\\t+/,\n  listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n  listIsTask: /^\\[[ xX]\\] /,\n  listReplaceTask: /^\\[[ xX]\\] +/,\n  anyLine: /\\n.*\\n/,\n  hrefBrackets: /^<(.*)>$/,\n  tableDelimiter: /[:|]/,\n  tableAlignChars: /^\\||\\| *$/g,\n  tableRowBlankLine: /\\n[ \\t]*$/,\n  tableAlignRight: /^ *-+: *$/,\n  tableAlignCenter: /^ *:-+: *$/,\n  tableAlignLeft: /^ *:-+ *$/,\n  startATag: /^<a /i,\n  endATag: /^<\\/a>/i,\n  startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n  endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n  startAngleBracket: /^</,\n  endAngleBracket: />$/,\n  pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n  unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n  escapeTest: /[&<>\"']/,\n  escapeReplace: /[&<>\"']/g,\n  escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n  escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n  unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n  caret: /(^|[^\\[])\\^/g,\n  percentDecode: /%25/g,\n  findPipe: /\\|/g,\n  splitPipe: / \\|/,\n  slashPipe: /\\\\\\|/g,\n  carriageReturn: /\\r\\n|\\r/g,\n  spaceLine: /^ +$/gm,\n  notSpaceStart: /^\\S*/,\n  endingNewline: /\\n$/,\n  listItemRegex: (bull: string) => new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`),\n  nextBulletRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`),\n  hrRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n  fencesBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n  headingBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n  htmlBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, 'i'),\n};\n\n/**\n * Block-Level Grammar\n */\n\nconst newline = /^(?:[ \\t]*(?:\\n|$))+/;\nconst blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\nconst lheading = edit(lheadingCore)\n  .replace(/bull/g, bullet) // lists can interrupt\n  .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n  .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n  .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n  .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n  .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n  .replace(/\\|table/g, '') // table not in commonmark\n  .getRegex();\nconst lheadingGfm = edit(lheadingCore)\n  .replace(/bull/g, bullet) // lists can interrupt\n  .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n  .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n  .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n  .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n  .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n  .replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/) // table can interrupt\n  .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n  .replace('label', _blockLabel)\n  .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n  .getRegex();\n\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n  .replace(/bull/g, bullet)\n  .getRegex();\n\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n  + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit(\n  '^ {0,3}(?:' // optional indentation\n+ '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n+ '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n+ '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n+ '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n+ '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n+ '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n+ '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n+ '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n+ ')', 'i')\n  .replace('comment', _comment)\n  .replace('tag', _tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nconst paragraph = edit(_paragraph)\n  .replace('hr', hr)\n  .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n  .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n  .replace('paragraph', paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nconst blockNormal = {\n  blockquote,\n  code: blockCode,\n  def,\n  fences,\n  heading,\n  hr,\n  html,\n  lheading,\n  list,\n  newline,\n  paragraph,\n  table: noopTest,\n  text: blockText,\n};\n\ntype BlockKeys = keyof typeof blockNormal;\n\n/**\n * GFM Block Grammar\n */\n\nconst gfmTable = edit(\n  '^ *([^\\\\n ].*)\\\\n' // Header\n+ ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n+ '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n  .replace('hr', hr)\n  .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nconst blockGfm: Record<BlockKeys, RegExp> = {\n  ...blockNormal,\n  lheading: lheadingGfm,\n  table: gfmTable,\n  paragraph: edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('table', gfmTable) // interrupt paragraphs with table\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex(),\n};\n\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nconst blockPedantic: Record<BlockKeys, RegExp> = {\n  ...blockNormal,\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', _comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', lheading)\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .replace('|tag', '')\n    .getRegex(),\n};\n\n/**\n * Inline-Level Grammar\n */\n\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = /[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\nconst punctuation = edit(/^((?![*_])punctSpace)/, 'u')\n  .replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n\n// GFM allows ~ inside strong and em for strikethrough\nconst _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\n\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\n\nconst emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\n\nconst emStrongLDelim = edit(emStrongLDelimCore, 'u')\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst emStrongLDelimGfm = edit(emStrongLDelimCore, 'u')\n  .replace(/punct/g, _punctuationGfmStrongEm)\n  .getRegex();\n\nconst emStrongRDelimAstCore =\n  '^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n+ '|[^*]+(?=[^*])' // Consume to delim\n+ '|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n+ '|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter\n+ '|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter\n+ '|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)' // (4) ***# can only be Left Delimiter\n+ '|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter\n+ '|notPunctSpace(\\\\*+)(?=notPunctSpace)'; // (6) a***a can be either Left or Right Delimiter\n\nconst emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu')\n  .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n  .replace(/punctSpace/g, _punctuationOrSpace)\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu')\n  .replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm)\n  .replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm)\n  .replace(/punct/g, _punctuationGfmStrongEm)\n  .getRegex();\n\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit(\n  '^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n+ '|[^_]+(?=[^_])' // Consume to delim\n+ '|(?!_)punct(_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n+ '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter\n+ '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter\n+ '|[\\\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter\n+ '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter\n  .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n  .replace(/punctSpace/g, _punctuationOrSpace)\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst anyPunctuation = edit(/\\\\(punct)/, 'gu')\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n  .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n  .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n  .getRegex();\n\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit(\n  '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n  .replace('comment', _inlineComment)\n  .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\n\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:(?:[ \\t]*(?:\\n[ \\t]*)?)(title))?\\s*\\)/)\n  .replace('label', _inlineLabel)\n  .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^ \\t\\n\\x00-\\x1f]*/)\n  .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n  .getRegex();\n\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n  .replace('label', _inlineLabel)\n  .replace('ref', _blockLabel)\n  .getRegex();\n\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n  .replace('ref', _blockLabel)\n  .getRegex();\n\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n  .replace('reflink', reflink)\n  .replace('nolink', nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\nconst inlineNormal = {\n  _backpedal: noopTest, // only used for GFM url\n  anyPunctuation,\n  autolink,\n  blockSkip,\n  br,\n  code: inlineCode,\n  del: noopTest,\n  emStrongLDelim,\n  emStrongRDelimAst,\n  emStrongRDelimUnd,\n  escape,\n  link,\n  nolink,\n  punctuation,\n  reflink,\n  reflinkSearch,\n  tag,\n  text: inlineText,\n  url: noopTest,\n};\n\ntype InlineKeys = keyof typeof inlineNormal;\n\n/**\n * Pedantic Inline Grammar\n */\n\nconst inlinePedantic: Record<InlineKeys, RegExp> = {\n  ...inlineNormal,\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', _inlineLabel)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', _inlineLabel)\n    .getRegex(),\n};\n\n/**\n * GFM Inline Grammar\n */\n\nconst inlineGfm: Record<InlineKeys, RegExp> = {\n  ...inlineNormal,\n  emStrongRDelimAst: emStrongRDelimAstGfm,\n  emStrongLDelim: emStrongLDelimGfm,\n  url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n    .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n    .getRegex(),\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n};\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\nconst inlineBreaks: Record<InlineKeys, RegExp> = {\n  ...inlineGfm,\n  br: edit(br).replace('{2,}', '*').getRegex(),\n  text: edit(inlineGfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex(),\n};\n\n/**\n * exports\n */\n\nexport const block = {\n  normal: blockNormal,\n  gfm: blockGfm,\n  pedantic: blockPedantic,\n};\n\nexport const inline = {\n  normal: inlineNormal,\n  gfm: inlineGfm,\n  breaks: inlineBreaks,\n  pedantic: inlinePedantic,\n};\n\nexport interface Rules {\n  other: typeof other\n  block: Record<BlockKeys, RegExp>\n  inline: Record<InlineKeys, RegExp>\n}\n","import { other } from './rules.ts';\n\n/**\n * Helpers\n */\nconst escapeReplacements: { [index: string]: string } = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch: string) => escapeReplacements[ch];\n\nexport function escape(html: string, encode?: boolean) {\n  if (encode) {\n    if (other.escapeTest.test(html)) {\n      return html.replace(other.escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (other.escapeTestNoEncode.test(html)) {\n      return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nexport function unescape(html: string) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(other.unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nexport function cleanUrl(href: string) {\n  try {\n    href = encodeURI(href).replace(other.percentDecode, '%');\n  } catch {\n    return null;\n  }\n  return href;\n}\n\nexport function splitCells(tableRow: string, count?: number) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n      let escaped = false;\n      let curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(other.splitPipe);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells.at(-1)?.trim()) {\n    cells.pop();\n  }\n\n  if (count) {\n    if (cells.length > count) {\n      cells.splice(count);\n    } else {\n      while (cells.length < count) cells.push('');\n    }\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str: string, c: string, invert?: boolean) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nexport function findClosingBracket(str: string, b: string) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n\n  let level = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  if (level > 0) {\n    return -2;\n  }\n\n  return -1;\n}\n","import { _defaults } from './defaults.ts';\nimport {\n  rtrim,\n  splitCells,\n  findClosingBracket,\n} from './helpers.ts';\nimport type { Rules } from './rules.ts';\nimport type { _Lexer } from './Lexer.ts';\nimport type { Links, Tokens, Token } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\nfunction outputLink(cap: string[], link: Pick<Tokens.Link, 'href' | 'title'>, raw: string, lexer: _Lexer, rules: Rules): Tokens.Link | Tokens.Image {\n  const href = link.href;\n  const title = link.title || null;\n  const text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n\n  lexer.state.inLink = true;\n  const token: Tokens.Link | Tokens.Image = {\n    type: cap[0].charAt(0) === '!' ? 'image' : 'link',\n    raw,\n    href,\n    title,\n    text,\n    tokens: lexer.inlineTokens(text),\n  };\n  lexer.state.inLink = false;\n  return token;\n}\n\nfunction indentCodeCompensation(raw: string, text: string, rules: Rules) {\n  const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(rules.other.beginningSpace);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nexport class _Tokenizer {\n  options: MarkedOptions;\n  rules!: Rules; // set by the lexer\n  lexer!: _Lexer; // set by the lexer\n\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  space(src: string): Tokens.Space | undefined {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0],\n      };\n    }\n  }\n\n  code(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text,\n      };\n    }\n  }\n\n  fences(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n        text,\n      };\n    }\n  }\n\n  heading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (this.rules.other.endingHash.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text),\n      };\n    }\n  }\n\n  hr(src: string): Tokens.Hr | undefined {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: rtrim(cap[0], '\\n'),\n      };\n    }\n  }\n\n  blockquote(src: string): Tokens.Blockquote | undefined {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      let lines = rtrim(cap[0], '\\n').split('\\n');\n      let raw = '';\n      let text = '';\n      const tokens: Token[] = [];\n\n      while (lines.length > 0) {\n        let inBlockquote = false;\n        const currentLines = [];\n\n        let i;\n        for (i = 0; i < lines.length; i++) {\n          // get lines up to a continuation\n          if (this.rules.other.blockquoteStart.test(lines[i])) {\n            currentLines.push(lines[i]);\n            inBlockquote = true;\n          } else if (!inBlockquote) {\n            currentLines.push(lines[i]);\n          } else {\n            break;\n          }\n        }\n        lines = lines.slice(i);\n\n        const currentRaw = currentLines.join('\\n');\n        const currentText = currentRaw\n          // precede setext continuation with 4 spaces so it isn't a setext\n          .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1')\n          .replace(this.rules.other.blockquoteSetextReplace2, '');\n        raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n        text = text ? `${text}\\n${currentText}` : currentText;\n\n        // parse blockquote lines as top level tokens\n        // merge paragraphs if this is a continuation\n        const top = this.lexer.state.top;\n        this.lexer.state.top = true;\n        this.lexer.blockTokens(currentText, tokens, true);\n        this.lexer.state.top = top;\n\n        // if there is no continuation then we are done\n        if (lines.length === 0) {\n          break;\n        }\n\n        const lastToken = tokens.at(-1);\n\n        if (lastToken?.type === 'code') {\n          // blockquote continuation cannot be preceded by a code block\n          break;\n        } else if (lastToken?.type === 'blockquote') {\n          // include continuation in nested blockquote\n          const oldToken = lastToken as Tokens.Blockquote;\n          const newText = oldToken.raw + '\\n' + lines.join('\\n');\n          const newToken = this.blockquote(newText)!;\n          tokens[tokens.length - 1] = newToken;\n\n          raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n          break;\n        } else if (lastToken?.type === 'list') {\n          // include continuation in nested list\n          const oldToken = lastToken as Tokens.List;\n          const newText = oldToken.raw + '\\n' + lines.join('\\n');\n          const newToken = this.list(newText)!;\n          tokens[tokens.length - 1] = newToken;\n\n          raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n          lines = newText.substring(tokens.at(-1)!.raw.length).split('\\n');\n          continue;\n        }\n      }\n\n      return {\n        type: 'blockquote',\n        raw,\n        tokens,\n        text,\n      };\n    }\n  }\n\n  list(src: string): Tokens.List | undefined {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list: Tokens.List = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: [],\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = this.rules.other.listItemRegex(bull);\n      let endsWithBlankLine = false;\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        let endEarly = false;\n        let raw = '';\n        let itemContents = '';\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        let line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, (t: string) => ' '.repeat(3 * t.length));\n        let nextLine = src.split('\\n', 1)[0];\n        let blankLine = !line.trim();\n\n        let indent = 0;\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimStart();\n        } else if (blankLine) {\n          indent = cap[1].length + 1;\n        } else {\n          indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        if (blankLine && this.rules.other.blankLine.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n          const hrRegex = this.rules.other.hrRegex(indent);\n          const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n          const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n          const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            const rawLine = src.split('\\n', 1)[0];\n            let nextLineWithoutTabs;\n            nextLine = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n              nextLineWithoutTabs = nextLine;\n            } else {\n              nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of html block\n            if (htmlBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(nextLine)) {\n              break;\n            }\n\n            if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) { // Dedent if possible\n              itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              }\n\n              // paragraph continuation unless last line was a different block level element\n              if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) { // indented code block\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n\n              itemContents += '\\n' + nextLine;\n            }\n\n            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLineWithoutTabs.slice(indent);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (this.rules.other.doubleBlankLine.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        let istask: RegExpExecArray | null = null;\n        let ischecked: boolean | undefined;\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = this.rules.other.listIsTask.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents,\n          tokens: [],\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      const lastItem = list.items.at(-1);\n      if (lastItem) {\n        lastItem.raw = lastItem.raw.trimEnd();\n        lastItem.text = lastItem.text.trimEnd();\n      } else {\n        // not a list since there were no items\n        return;\n      }\n      list.raw = list.raw.trimEnd();\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (let i = 0; i < list.items.length; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));\n\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (let i = 0; i < list.items.length; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src: string): Tokens.HTML | undefined {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token: Tokens.HTML = {\n        type: 'html',\n        block: true,\n        raw: cap[0],\n        pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n        text: cap[0],\n      };\n      return token;\n    }\n  }\n\n  def(src: string): Tokens.Def | undefined {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n      const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title,\n      };\n    }\n  }\n\n  table(src: string): Tokens.Table | undefined {\n    const cap = this.rules.block.table.exec(src);\n    if (!cap) {\n      return;\n    }\n\n    if (!this.rules.other.tableDelimiter.test(cap[2])) {\n      // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n      return;\n    }\n\n    const headers = splitCells(cap[1]);\n    const aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n    const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n\n    const item: Tokens.Table = {\n      type: 'table',\n      raw: cap[0],\n      header: [],\n      align: [],\n      rows: [],\n    };\n\n    if (headers.length !== aligns.length) {\n      // header and align columns must be equal, rows can be different.\n      return;\n    }\n\n    for (const align of aligns) {\n      if (this.rules.other.tableAlignRight.test(align)) {\n        item.align.push('right');\n      } else if (this.rules.other.tableAlignCenter.test(align)) {\n        item.align.push('center');\n      } else if (this.rules.other.tableAlignLeft.test(align)) {\n        item.align.push('left');\n      } else {\n        item.align.push(null);\n      }\n    }\n\n    for (let i = 0; i < headers.length; i++) {\n      item.header.push({\n        text: headers[i],\n        tokens: this.lexer.inline(headers[i]),\n        header: true,\n        align: item.align[i],\n      });\n    }\n\n    for (const row of rows) {\n      item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n        return {\n          text: cell,\n          tokens: this.lexer.inline(cell),\n          header: false,\n          align: item.align[i],\n        };\n      }));\n    }\n\n    return item;\n  }\n\n  lheading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1]),\n      };\n    }\n  }\n\n  paragraph(src: string): Tokens.Paragraph | undefined {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n        ? cap[1].slice(0, -1)\n        : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text),\n      };\n    }\n  }\n\n  text(src: string): Tokens.Text | undefined {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0]),\n      };\n    }\n  }\n\n  escape(src: string): Tokens.Escape | undefined {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: cap[1],\n      };\n    }\n  }\n\n  tag(src: string): Tokens.Tag | undefined {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: cap[0],\n      };\n    }\n  }\n\n  link(src: string): Tokens.Link | Tokens.Image | undefined {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex === -2) {\n          // more open parens than closed\n          return;\n        }\n\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = this.rules.other.pedanticHrefTitle.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (this.rules.other.startAngleBracket.test(href)) {\n        if (this.options.pedantic && !(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n        title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n      }, cap[0], this.lexer, this.rules);\n    }\n  }\n\n  reflink(src: string, links: Links): Tokens.Link | Tokens.Image | Tokens.Text | undefined {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n      || (cap = this.rules.inline.nolink.exec(src))) {\n      const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n      const link = links[linkString.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text,\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer, this.rules);\n    }\n  }\n\n  emStrong(src: string, maskedSrc: string, prevChar = ''): Tokens.Em | Tokens.Strong | undefined {\n    let match = this.rules.inline.emStrongLDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n      // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n      const lLength = [...match[0]].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = [...rDelim].length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n        // char length can be >1 for unicode characters;\n        const lastCharLength = [...match[0]][0].length;\n        const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text),\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text),\n        };\n      }\n    }\n  }\n\n  codespan(src: string): Tokens.Codespan | undefined {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n      const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n      const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text,\n      };\n    }\n  }\n\n  br(src: string): Tokens.Br | undefined {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0],\n      };\n    }\n  }\n\n  del(src: string): Tokens.Del | undefined {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2]),\n      };\n    }\n  }\n\n  autolink(src: string): Tokens.Link | undefined {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = cap[1];\n        href = 'mailto:' + text;\n      } else {\n        text = cap[1];\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text,\n          },\n        ],\n      };\n    }\n  }\n\n  url(src: string): Tokens.Link | undefined {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = cap[0];\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n        } while (prevCapZero !== cap[0]);\n        text = cap[0];\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text,\n          },\n        ],\n      };\n    }\n  }\n\n  inlineText(src: string): Tokens.Text | undefined {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      const escaped = this.lexer.state.inRawBlock;\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        escaped,\n      };\n    }\n  }\n}\n","import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { other, block, inline } from './rules.ts';\nimport type { Token, TokensList, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Block Lexer\n */\nexport class _Lexer {\n  tokens: TokensList;\n  options: MarkedOptions;\n  state: {\n    inLink: boolean;\n    inRawBlock: boolean;\n    top: boolean;\n  };\n\n  private tokenizer: _Tokenizer;\n  private inlineQueue: { src: string, tokens: Token[] }[];\n\n  constructor(options?: MarkedOptions) {\n    // TokenList cannot be created in one go\n    this.tokens = [] as unknown as TokensList;\n    this.tokens.links = Object.create(null);\n    this.options = options || _defaults;\n    this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true,\n    };\n\n    const rules = {\n      other,\n      block: block.normal,\n      inline: inline.normal,\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline,\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src: string, options?: MarkedOptions) {\n    const lexer = new _Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src: string, options?: MarkedOptions) {\n    const lexer = new _Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src: string) {\n    src = src.replace(other.carriageReturn, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    for (let i = 0; i < this.inlineQueue.length; i++) {\n      const next = this.inlineQueue[i];\n      this.inlineTokens(next.src, next.tokens);\n    }\n    this.inlineQueue = [];\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src: string, tokens?: Token[], lastParagraphClipped?: boolean): Token[];\n  blockTokens(src: string, tokens?: TokensList, lastParagraphClipped?: boolean): TokensList;\n  blockTokens(src: string, tokens: Token[] = [], lastParagraphClipped = false) {\n    if (this.options.pedantic) {\n      src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n    }\n\n    while (src) {\n      let token: Tokens.Generic | undefined;\n\n      if (this.options.extensions?.block?.some((extTokenizer) => {\n        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.raw.length === 1 && lastToken !== undefined) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unnecessary paragraph tags\n          lastToken.raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title,\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      let cutSrc = src;\n      if (this.options.extensions?.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        const lastToken = tokens.at(-1);\n        if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = cutSrc.length !== src.length;\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src: string, tokens: Token[] = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src: string, tokens: Token[] = []): Token[] {\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match: RegExpExecArray | null = null;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index)\n              + '[' + 'a'.repeat(match[0].length - 2) + ']'\n              + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n\n    // Mask out escaped characters\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    }\n\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    let keepPrevChar = false;\n    let prevChar = '';\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      let token: Tokens.Generic | undefined;\n\n      // extensions\n      if (this.options.extensions?.inline?.some((extTokenizer) => {\n        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.type === 'text' && lastToken?.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      let cutSrc = src;\n      if (this.options.extensions?.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport {\n  cleanUrl,\n  escape,\n} from './helpers.ts';\nimport { other } from './rules.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\nimport type { Tokens } from './Tokens.ts';\nimport type { _Parser } from './Parser.ts';\n\n/**\n * Renderer\n */\nexport class _Renderer {\n  options: MarkedOptions;\n  parser!: _Parser; // set by the parser\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  space(token: Tokens.Space): string {\n    return '';\n  }\n\n  code({ text, lang, escaped }: Tokens.Code): string {\n    const langString = (lang || '').match(other.notSpaceStart)?.[0];\n\n    const code = text.replace(other.endingNewline, '') + '\\n';\n\n    if (!langString) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"language-'\n      + escape(langString)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  blockquote({ tokens }: Tokens.Blockquote): string {\n    const body = this.parser.parse(tokens);\n    return `<blockquote>\\n${body}</blockquote>\\n`;\n  }\n\n  html({ text }: Tokens.HTML | Tokens.Tag) : string {\n    return text;\n  }\n\n  heading({ tokens, depth }: Tokens.Heading): string {\n    return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n  }\n\n  hr(token: Tokens.Hr): string {\n    return '<hr>\\n';\n  }\n\n  list(token: Tokens.List): string {\n    const ordered = token.ordered;\n    const start = token.start;\n\n    let body = '';\n    for (let j = 0; j < token.items.length; j++) {\n      const item = token.items[j];\n      body += this.listitem(item);\n    }\n\n    const type = ordered ? 'ol' : 'ul';\n    const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  listitem(item: Tokens.ListItem): string {\n    let itemBody = '';\n    if (item.task) {\n      const checkbox = this.checkbox({ checked: !!item.checked });\n      if (item.loose) {\n        if (item.tokens[0]?.type === 'paragraph') {\n          item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n          if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n            item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n            item.tokens[0].tokens[0].escaped = true;\n          }\n        } else {\n          item.tokens.unshift({\n            type: 'text',\n            raw: checkbox + ' ',\n            text: checkbox + ' ',\n            escaped: true,\n          });\n        }\n      } else {\n        itemBody += checkbox + ' ';\n      }\n    }\n\n    itemBody += this.parser.parse(item.tokens, !!item.loose);\n\n    return `<li>${itemBody}</li>\\n`;\n  }\n\n  checkbox({ checked }: Tokens.Checkbox): string {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\">';\n  }\n\n  paragraph({ tokens }: Tokens.Paragraph): string {\n    return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n  }\n\n  table(token: Tokens.Table): string {\n    let header = '';\n\n    // header\n    let cell = '';\n    for (let j = 0; j < token.header.length; j++) {\n      cell += this.tablecell(token.header[j]);\n    }\n    header += this.tablerow({ text: cell });\n\n    let body = '';\n    for (let j = 0; j < token.rows.length; j++) {\n      const row = token.rows[j];\n\n      cell = '';\n      for (let k = 0; k < row.length; k++) {\n        cell += this.tablecell(row[k]);\n      }\n\n      body += this.tablerow({ text: cell });\n    }\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  tablerow({ text }: Tokens.TableRow): string {\n    return `<tr>\\n${text}</tr>\\n`;\n  }\n\n  tablecell(token: Tokens.TableCell): string {\n    const content = this.parser.parseInline(token.tokens);\n    const type = token.header ? 'th' : 'td';\n    const tag = token.align\n      ? `<${type} align=\"${token.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   */\n  strong({ tokens }: Tokens.Strong): string {\n    return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n  }\n\n  em({ tokens }: Tokens.Em): string {\n    return `<em>${this.parser.parseInline(tokens)}</em>`;\n  }\n\n  codespan({ text }: Tokens.Codespan): string {\n    return `<code>${escape(text, true)}</code>`;\n  }\n\n  br(token: Tokens.Br): string {\n    return '<br>';\n  }\n\n  del({ tokens }: Tokens.Del): string {\n    return `<del>${this.parser.parseInline(tokens)}</del>`;\n  }\n\n  link({ href, title, tokens }: Tokens.Link): string {\n    const text = this.parser.parseInline(tokens);\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return text;\n    }\n    href = cleanHref;\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + (escape(title)) + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  image({ href, title, text, tokens }: Tokens.Image): string {\n    if (tokens) {\n      text = this.parser.parseInline(tokens, this.parser.textRenderer);\n    }\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return escape(text);\n    }\n    href = cleanHref;\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${escape(title)}\"`;\n    }\n    out += '>';\n    return out;\n  }\n\n  text(token: Tokens.Text | Tokens.Escape) : string {\n    return 'tokens' in token && token.tokens\n      ? this.parser.parseInline(token.tokens)\n      : ('escaped' in token && token.escaped ? token.text : escape(token.text));\n  }\n}\n","import type { Tokens } from './Tokens.ts';\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer {\n  // no need for block level renderers\n  strong({ text }: Tokens.Strong) {\n    return text;\n  }\n\n  em({ text }: Tokens.Em) {\n    return text;\n  }\n\n  codespan({ text }: Tokens.Codespan) {\n    return text;\n  }\n\n  del({ text }: Tokens.Del) {\n    return text;\n  }\n\n  html({ text }: Tokens.HTML | Tokens.Tag) {\n    return text;\n  }\n\n  text({ text }: Tokens.Text | Tokens.Escape | Tokens.Tag) {\n    return text;\n  }\n\n  link({ text }: Tokens.Link) {\n    return '' + text;\n  }\n\n  image({ text }: Tokens.Image) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n","import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _defaults } from './defaults.ts';\nimport type { MarkedToken, Token, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Parsing & Compiling\n */\nexport class _Parser {\n  options: MarkedOptions;\n  renderer: _Renderer;\n  textRenderer: _TextRenderer;\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n    this.options.renderer = this.options.renderer || new _Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.renderer.parser = this;\n    this.textRenderer = new _TextRenderer();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens: Token[], options?: MarkedOptions) {\n    const parser = new _Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens: Token[], options?: MarkedOptions) {\n    const parser = new _Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens: Token[], top = true): string {\n    let out = '';\n\n    for (let i = 0; i < tokens.length; i++) {\n      const anyToken = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions?.renderers?.[anyToken.type]) {\n        const genericToken = anyToken as Tokens.Generic;\n        const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      const token = anyToken as MarkedToken;\n\n      switch (token.type) {\n        case 'space': {\n          out += this.renderer.space(token);\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr(token);\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(token);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token);\n          continue;\n        }\n        case 'table': {\n          out += this.renderer.table(token);\n          continue;\n        }\n        case 'blockquote': {\n          out += this.renderer.blockquote(token);\n          continue;\n        }\n        case 'list': {\n          out += this.renderer.list(token);\n          continue;\n        }\n        case 'html': {\n          out += this.renderer.html(token);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(token);\n          continue;\n        }\n        case 'text': {\n          let textToken = token;\n          let body = this.renderer.text(textToken);\n          while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n            textToken = tokens[++i] as Tokens.Text;\n            body += '\\n' + this.renderer.text(textToken);\n          }\n          if (top) {\n            out += this.renderer.paragraph({\n              type: 'paragraph',\n              raw: body,\n              text: body,\n              tokens: [{ type: 'text', raw: body, text: body, escaped: true }],\n            });\n          } else {\n            out += body;\n          }\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '';\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens: Token[], renderer: _Renderer | _TextRenderer = this.renderer): string {\n    let out = '';\n\n    for (let i = 0; i < tokens.length; i++) {\n      const anyToken = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions?.renderers?.[anyToken.type]) {\n        const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      const token = anyToken as MarkedToken;\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token);\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(token);\n          break;\n        }\n        case 'em': {\n          out += renderer.em(token);\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token);\n          break;\n        }\n        case 'br': {\n          out += renderer.br(token);\n          break;\n        }\n        case 'del': {\n          out += renderer.del(token);\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '';\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\n\nexport class _Hooks {\n  options: MarkedOptions;\n  block?: boolean;\n\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  static passThroughHooks = new Set([\n    'preprocess',\n    'postprocess',\n    'processAllTokens',\n  ]);\n\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown: string) {\n    return markdown;\n  }\n\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html: string) {\n    return html;\n  }\n\n  /**\n   * Process all tokens before walk tokens\n   */\n  processAllTokens(tokens: Token[] | TokensList) {\n    return tokens;\n  }\n\n  /**\n   * Provide function to tokenize markdown\n   */\n  provideLexer() {\n    return this.block ? _Lexer.lex : _Lexer.lexInline;\n  }\n\n  /**\n   * Provide function to parse tokens\n   */\n  provideParser() {\n    return this.block ? _Parser.parse : _Parser.parseInline;\n  }\n}\n","import { _getDefaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { escape } from './helpers.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, Tokens, TokensList } from './Tokens.ts';\n\nexport type MaybePromise = void | Promise<void>;\n\ntype UnknownFunction = (...args: unknown[]) => unknown;\ntype GenericRendererFunction = (...args: unknown[]) => string | false;\n\nexport class Marked {\n  defaults = _getDefaults();\n  options = this.setOptions;\n\n  parse = this.parseMarkdown(true);\n  parseInline = this.parseMarkdown(false);\n\n  Parser = _Parser;\n  Renderer = _Renderer;\n  TextRenderer = _TextRenderer;\n  Lexer = _Lexer;\n  Tokenizer = _Tokenizer;\n  Hooks = _Hooks;\n\n  constructor(...args: MarkedExtension[]) {\n    this.use(...args);\n  }\n\n  /**\n   * Run callback for every token\n   */\n  walkTokens(tokens: Token[] | TokensList, callback: (token: Token) => MaybePromise | MaybePromise[]) {\n    let values: MaybePromise[] = [];\n    for (const token of tokens) {\n      values = values.concat(callback.call(this, token));\n      switch (token.type) {\n        case 'table': {\n          const tableToken = token as Tokens.Table;\n          for (const cell of tableToken.header) {\n            values = values.concat(this.walkTokens(cell.tokens, callback));\n          }\n          for (const row of tableToken.rows) {\n            for (const cell of row) {\n              values = values.concat(this.walkTokens(cell.tokens, callback));\n            }\n          }\n          break;\n        }\n        case 'list': {\n          const listToken = token as Tokens.List;\n          values = values.concat(this.walkTokens(listToken.items, callback));\n          break;\n        }\n        default: {\n          const genericToken = token as Tokens.Generic;\n          if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n            this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n              const tokens = genericToken[childTokens].flat(Infinity) as Token[] | TokensList;\n              values = values.concat(this.walkTokens(tokens, callback));\n            });\n          } else if (genericToken.tokens) {\n            values = values.concat(this.walkTokens(genericToken.tokens, callback));\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  use(...args: MarkedExtension[]) {\n    const extensions: MarkedOptions['extensions'] = this.defaults.extensions || { renderers: {}, childTokens: {} };\n\n    args.forEach((pack) => {\n      // copy options to new object\n      const opts = { ...pack } as MarkedOptions;\n\n      // set async to true if it was set to true before\n      opts.async = this.defaults.async || opts.async || false;\n\n      // ==-- Parse \"addon\" extensions --== //\n      if (pack.extensions) {\n        pack.extensions.forEach((ext) => {\n          if (!ext.name) {\n            throw new Error('extension name required');\n          }\n          if ('renderer' in ext) { // Renderer extensions\n            const prevRenderer = extensions.renderers[ext.name];\n            if (prevRenderer) {\n              // Replace extension with func to run new extension but fall back if false\n              extensions.renderers[ext.name] = function(...args) {\n                let ret = ext.renderer.apply(this, args);\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args);\n                }\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n          if ('tokenizer' in ext) { // Tokenizer Extensions\n            if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n            const extLevel = extensions[ext.level];\n            if (extLevel) {\n              extLevel.unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n            if (ext.start) { // Function to check for start of token\n              if (ext.level === 'block') {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start);\n                } else {\n                  extensions.startBlock = [ext.start];\n                }\n              } else if (ext.level === 'inline') {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start);\n                } else {\n                  extensions.startInline = [ext.start];\n                }\n              }\n            }\n          }\n          if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n        opts.extensions = extensions;\n      }\n\n      // ==-- Parse \"overwrite\" extensions --== //\n      if (pack.renderer) {\n        const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n        for (const prop in pack.renderer) {\n          if (!(prop in renderer)) {\n            throw new Error(`renderer '${prop}' does not exist`);\n          }\n          if (['options', 'parser'].includes(prop)) {\n            // ignore options property\n            continue;\n          }\n          const rendererProp = prop as Exclude<keyof _Renderer, 'options' | 'parser'>;\n          const rendererFunc = pack.renderer[rendererProp] as GenericRendererFunction;\n          const prevRenderer = renderer[rendererProp] as GenericRendererFunction;\n          // Replace renderer with func to run extension, but fall back if false\n          renderer[rendererProp] = (...args: unknown[]) => {\n            let ret = rendererFunc.apply(renderer, args);\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args);\n            }\n            return ret || '';\n          };\n        }\n        opts.renderer = renderer;\n      }\n      if (pack.tokenizer) {\n        const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n        for (const prop in pack.tokenizer) {\n          if (!(prop in tokenizer)) {\n            throw new Error(`tokenizer '${prop}' does not exist`);\n          }\n          if (['options', 'rules', 'lexer'].includes(prop)) {\n            // ignore options, rules, and lexer properties\n            continue;\n          }\n          const tokenizerProp = prop as Exclude<keyof _Tokenizer, 'options' | 'rules' | 'lexer'>;\n          const tokenizerFunc = pack.tokenizer[tokenizerProp] as UnknownFunction;\n          const prevTokenizer = tokenizer[tokenizerProp] as UnknownFunction;\n          // Replace tokenizer with func to run extension, but fall back if false\n          // @ts-expect-error cannot type tokenizer function dynamically\n          tokenizer[tokenizerProp] = (...args: unknown[]) => {\n            let ret = tokenizerFunc.apply(tokenizer, args);\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args);\n            }\n            return ret;\n          };\n        }\n        opts.tokenizer = tokenizer;\n      }\n\n      // ==-- Parse Hooks extensions --== //\n      if (pack.hooks) {\n        const hooks = this.defaults.hooks || new _Hooks();\n        for (const prop in pack.hooks) {\n          if (!(prop in hooks)) {\n            throw new Error(`hook '${prop}' does not exist`);\n          }\n          if (['options', 'block'].includes(prop)) {\n            // ignore options and block properties\n            continue;\n          }\n          const hooksProp = prop as Exclude<keyof _Hooks, 'options' | 'block'>;\n          const hooksFunc = pack.hooks[hooksProp] as UnknownFunction;\n          const prevHook = hooks[hooksProp] as UnknownFunction;\n          if (_Hooks.passThroughHooks.has(prop)) {\n            // @ts-expect-error cannot type hook function dynamically\n            hooks[hooksProp] = (arg: unknown) => {\n              if (this.defaults.async) {\n                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                  return prevHook.call(hooks, ret);\n                });\n              }\n\n              const ret = hooksFunc.call(hooks, arg);\n              return prevHook.call(hooks, ret);\n            };\n          } else {\n            // @ts-expect-error cannot type hook function dynamically\n            hooks[hooksProp] = (...args: unknown[]) => {\n              let ret = hooksFunc.apply(hooks, args);\n              if (ret === false) {\n                ret = prevHook.apply(hooks, args);\n              }\n              return ret;\n            };\n          }\n        }\n        opts.hooks = hooks;\n      }\n\n      // ==-- Parse WalkTokens extensions --== //\n      if (pack.walkTokens) {\n        const walkTokens = this.defaults.walkTokens;\n        const packWalktokens = pack.walkTokens;\n        opts.walkTokens = function(token) {\n          let values: MaybePromise[] = [];\n          values.push(packWalktokens.call(this, token));\n          if (walkTokens) {\n            values = values.concat(walkTokens.call(this, token));\n          }\n          return values;\n        };\n      }\n\n      this.defaults = { ...this.defaults, ...opts };\n    });\n\n    return this;\n  }\n\n  setOptions(opt: MarkedOptions) {\n    this.defaults = { ...this.defaults, ...opt };\n    return this;\n  }\n\n  lexer(src: string, options?: MarkedOptions) {\n    return _Lexer.lex(src, options ?? this.defaults);\n  }\n\n  parser(tokens: Token[], options?: MarkedOptions) {\n    return _Parser.parse(tokens, options ?? this.defaults);\n  }\n\n  private parseMarkdown(blockType: boolean) {\n    type overloadedParse = {\n      (src: string, options: MarkedOptions & { async: true }): Promise<string>;\n      (src: string, options: MarkedOptions & { async: false }): string;\n      (src: string, options?: MarkedOptions | null): string | Promise<string>;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const parse: overloadedParse = (src: string, options?: MarkedOptions | null): any => {\n      const origOpt = { ...options };\n      const opt = { ...this.defaults, ...origOpt };\n\n      const throwError = this.onError(!!opt.silent, !!opt.async);\n\n      // throw error if an extension set async to true but parse was called with async: false\n      if (this.defaults.async === true && origOpt.async === false) {\n        return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n      }\n\n      // throw error in case of non string input\n      if (typeof src === 'undefined' || src === null) {\n        return throwError(new Error('marked(): input parameter is undefined or null'));\n      }\n      if (typeof src !== 'string') {\n        return throwError(new Error('marked(): input parameter is of type '\n          + Object.prototype.toString.call(src) + ', string expected'));\n      }\n\n      if (opt.hooks) {\n        opt.hooks.options = opt;\n        opt.hooks.block = blockType;\n      }\n\n      const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n      const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n\n      if (opt.async) {\n        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n          .then(src => lexer(src, opt))\n          .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n          .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n          .then(tokens => parser(tokens, opt))\n          .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n          .catch(throwError);\n      }\n\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src) as string;\n        }\n        let tokens = lexer(src, opt);\n        if (opt.hooks) {\n          tokens = opt.hooks.processAllTokens(tokens);\n        }\n        if (opt.walkTokens) {\n          this.walkTokens(tokens, opt.walkTokens);\n        }\n        let html = parser(tokens, opt);\n        if (opt.hooks) {\n          html = opt.hooks.postprocess(html) as string;\n        }\n        return html;\n      } catch (e) {\n        return throwError(e as Error);\n      }\n    };\n\n    return parse;\n  }\n\n  private onError(silent: boolean, async: boolean) {\n    return (e: Error): string | Promise<string> => {\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n      if (silent) {\n        const msg = '<p>An error occurred:</p><pre>'\n          + escape(e.message + '', true)\n          + '</pre>';\n        if (async) {\n          return Promise.resolve(msg);\n        }\n        return msg;\n      }\n\n      if (async) {\n        return Promise.reject(e);\n      }\n      throw e;\n    };\n  }\n}\n","import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport {\n  _getDefaults,\n  changeDefaults,\n  _defaults,\n} from './defaults.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\nimport type { MaybePromise } from './Instance.ts';\n\nconst markedInstance = new Marked();\n\n/**\n * Compiles markdown to HTML asynchronously.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options, having async: true\n * @return Promise of string of compiled HTML\n */\nexport function marked(src: string, options: MarkedOptions & { async: true }): Promise<string>;\n\n/**\n * Compiles markdown to HTML.\n *\n * @param src String of markdown source to be compiled\n * @param options Optional hash of options\n * @return String of compiled HTML. Will be a Promise of string if async is set to true by any extensions.\n */\nexport function marked(src: string, options: MarkedOptions & { async: false }): string;\nexport function marked(src: string, options: MarkedOptions & { async: true }): Promise<string>;\nexport function marked(src: string, options?: MarkedOptions | null): string | Promise<string>;\nexport function marked(src: string, opt?: MarkedOptions | null): string | Promise<string> {\n  return markedInstance.parse(src, opt);\n}\n\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\nmarked.setOptions = function(options: MarkedOptions) {\n  markedInstance.setOptions(options);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\n\nmarked.defaults = _defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args: MarkedExtension[]) {\n  markedInstance.use(...args);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens: Token[] | TokensList, callback: (token: Token) => MaybePromise | MaybePromise[]) {\n  return markedInstance.walkTokens(tokens, callback);\n};\n\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\n\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\nexport type * from './MarkedOptions.ts';\nexport type * from './Tokens.ts';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}